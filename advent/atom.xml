<?xml version="1.0" encoding="us-ascii"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OX Advent Calendar</title><id>http://ox.iinteractive.com/advent/</id><link href="http://ox.iinteractive.com/advent/atom.xml" rel="self"/><updated>2012-12-04T23:47:23-06:00</updated><author><name>Jesse Luehrs</name></author><generator uri="http://search.cpan.org/dist/XML-Atom-SimpleFeed/" version="0.86">XML::Atom::SimpleFeed</generator><entry><title>Bread::Board</title><link href="http://ox.iinteractive.com/advent/2012-12-04.html"/><id>http://ox.iinteractive.com/advent/2012-12-04.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Dependency-Injection&#34;&gt;Dependency Injection&lt;/h2&gt;

&lt;p&gt;One thing that you may have noticed in the article about actions is that actions only receive the request object. There is no global application context, or stash, or anything like that, like you may be used to in other frameworks. This is by design - global state in general is bad for maintainability.&lt;/p&gt;

&lt;p&gt;This does present a problem, however - how do you access things like your model objects, if action methods aren&#38;#39;t passed anything which can access them? The answer is pretty straightforward: if your controller is going to use a model object, that object should be an attribute. This limits the scope of your helper objects to only the places you expect them to actually be used (which helps in debugging, and reliability in general), without making them any more difficult to access.&lt;/p&gt;

&lt;p&gt;The mechanism which powers this is called &lt;i&gt;dependency injection&lt;/i&gt;. Dependency injection is a pattern in which you specify the relationships between your objects (which objects are necessary for each objects&#38;#39; construction), and a framework determines how to create the objects on demand such that all of the dependencies are met. The framework that OX uses is called &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt;, via the &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Declare&#34;&gt;Bread::Board::Declare&lt;/a&gt; sugar layer.&lt;/p&gt;

&lt;h2 id=&#34;Defining-services&#34;&gt;Defining services&lt;/h2&gt;

&lt;p&gt;Describing your application is done by creating &lt;i&gt;services&lt;/i&gt; for each type of object your application will need. In OX (because OX uses Bread::Board::Declare), this is as simple as creating attributes on your application class, just like you would in any other project. The difference is that in the attribute definition, you must define how the value for that attribute should be created, and which other attributes the creation process needs. Here is an example of an OX class with a few attribute defintions:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;dsn&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dbi:mysql:myapp&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;block&lt;/span&gt;        =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$s&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; MyApp::Model-&#38;gt;&lt;span class=&#34;synStatement&#34;&gt;connect&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$s-&#38;gt;param&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;));&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synComment&#34;&gt;# ...&lt;/span&gt;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This is very similar to the way you would write the class normally, except that you use the &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;block&lt;/code&gt; options instead of &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;builder&lt;/code&gt;, and if your attribute holds an object with a constructor that takes key/value pairs (like Moose objects do by default), you don&#38;#39;t have to specify anything at all (Bread::Board will figure out how to create the object on its own).&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;dsn&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dbi:mysql:myapp&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If the attribute specifies &lt;code&gt;value&lt;/code&gt;, then requesting the service will return that given value directly. Here, requesting the &lt;code&gt;dsn&lt;/code&gt; service will return the string &lt;code&gt;&#38;quot;dbi:mysql:myapp&#38;quot;&lt;/code&gt; unless another value has been provided for this attribute, such as from a constructor parameter.&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;block&lt;/span&gt;        =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$s&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; MyApp::Model-&#38;gt;&lt;span class=&#34;synStatement&#34;&gt;connect&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$s-&#38;gt;param&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;));&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you specify &lt;code&gt;block&lt;/code&gt;, Bread::Board will first initialize all of the dependencies. Then, it will call the subroutine provided in &lt;code&gt;block&lt;/code&gt;. That subroutine receives one argument, an object which contains the value of each dependency. The dependency values can be accessed via the &lt;code&gt;param&lt;/code&gt; method on that object. Here, requesting the &lt;code&gt;model&lt;/code&gt; service will first get the value from the &lt;code&gt;dsn&lt;/code&gt; service, and then call the given sub. Calling &lt;code&gt;$s-&#38;gt;param(&#38;#39;dsn&#38;#39;)&lt;/code&gt; inside that sub will return the value for the &lt;code&gt;dsn&lt;/code&gt; service.&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you specify neither of those, but the type constraint corresponds to a class, Bread::Board will get the value associated with each dependency listed and pass them as parameters to the constructor. For instance, here the value for the service will be created by calling &lt;code&gt;MyApp::Controller-&#38;gt;new(model =&#38;gt; $model)&lt;/code&gt; (where &lt;code&gt;$model&lt;/code&gt; is the value retrieved from the &lt;code&gt;model&lt;/code&gt; service).&lt;/p&gt;

&lt;h2 id=&#34;Dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;&lt;i&gt;Dependencies&lt;/i&gt; are how services know which other services are required in order to generate their value. The simplest way to specify dependencies is with an arrayref of service names (as above). If you need to use a different name for a service, however, you&#38;#39;ll need to specify the dependencies via a hashref:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;view&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Template&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;INCLUDE_PATH&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;template_root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will create a &lt;a href=&#34;https://metacpan.org/module/Template&#34;&gt;Template&lt;/a&gt; object by calling &lt;code&gt;Template-&#38;gt;new(INCLUDE_PATH =&#38;gt; $template_root)&lt;/code&gt;, where &lt;code&gt;$template_root&lt;/code&gt; is created from the &lt;code&gt;template_root&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Sometimes you don&#38;#39;t necessarily want to create trivial services for constant values. If you want to create a service with an inline, hardcoded value for one of its constructor parameters, you can use the &lt;code&gt;literal&lt;/code&gt; helper keyword:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;view&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Template&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;INCLUDE_PATH&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;template_root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;TAG_STYLE&lt;/span&gt;    =&#38;gt; literal(&lt;span class=&#34;synConstant&#34;&gt;&#39;php&#39;&lt;/span&gt;),&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will do the same thing as above, except that it will call &lt;code&gt;Template-&#38;gt;new(INCLUDE_PATH =&#38;gt; $template_root, TAG_STYLE =&#38;gt; &#38;#39;php&#38;#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;Resolving-services&#34;&gt;Resolving services&lt;/h2&gt;

&lt;p&gt;Requesting the value from a service is called &lt;i&gt;resolving&lt;/i&gt; the service. Recall from the article on route builders that there are many ways to specify which code executes when a route matches. For instance, you can specify an action like &lt;code&gt;&#38;quot;profile.edit&#38;quot;&lt;/code&gt;. To dispatch this action, OX first resolves the &lt;code&gt;profile&lt;/code&gt; service, which by convention we also call the &lt;code&gt;profile&lt;/code&gt; &lt;i&gt;controller&lt;/i&gt; since it is a kind of dispatch target. OX then calls the &lt;code&gt;edit&lt;/code&gt; method (called the &lt;code&gt;edit&lt;/code&gt; &lt;i&gt;action&lt;/i&gt;) on the &lt;code&gt;profile&lt;/code&gt; controller. Thanks to Bread::Board, your &lt;code&gt;profile&lt;/code&gt; controller will be fully initialized with all of its specified dependencies, so that OX can satisfy the user&#38;#39;s web request.&lt;/p&gt;

&lt;p&gt;If you want to get the values out of your application class separately, you can just call the accessor for the attribute. If the attribute doesn&#38;#39;t have a value stored in it, this will create a new instance of the value held by the service and return it (otherwise, it will work like a normal attribute). Other ways to interact with services will be described in a future article.&lt;/p&gt;

&lt;h2 id=&#34;Further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;This article has been just a very high level overview of how to create OX applications that use additional classes. We will be going deeper into detail about how to use Bread::Board features more effectively with OX in future articles, but if you&#38;#39;re interested in learning more about it, the documentation for &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt; (especially the &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Manual&#34;&gt;Bread::Board::Manual&lt;/a&gt;) and &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Declare&#34;&gt;Bread::Board::Declare&lt;/a&gt; are useful resources, as is &lt;a href=&#34;http://youtu.be/DhhaOQWoOpw&#34;&gt;this talk&lt;/a&gt; from YAPC::NA 2012.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-04T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Routes and Path::Router</title><link href="http://ox.iinteractive.com/advent/2012-12-03.html"/><id>http://ox.iinteractive.com/advent/2012-12-03.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Routing&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;Routing is the step that takes an HTTP request and decides what code should actually be run. Although any part of the request can be used here, in practice routing happens by only looking at the path (and maybe the HTTP method).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Path::Router&#34;&gt;Path::Router&lt;/a&gt; is a module which can take an incoming path and return which of a set of route definitions it matched. OX uses this as the basis for its routing. Path::Router handles solely the path aspect of routing - routing based on other things (such as HTTP methods) must be handled via route builders.&lt;/p&gt;

&lt;h3 id=&#34;Basic-routes&#34;&gt;Basic routes&lt;/h3&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/archive&#39;&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.archive&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/auth/login&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;auth.login&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The simplest pattern for matching paths consists of just a literal string, to be matched against the incoming path. This only looks at the path itself (to be specific, the &lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; &lt;code&gt;PATH_INFO&lt;/code&gt; variable), so any query parameters are ignored. If the path in the incoming request is equal to any of the paths defined in the router, that path is chosen, and its associated code is run to create the response. If no path matches, a 404 response is returned.&lt;/p&gt;

&lt;h3 id=&#34;Route-variables&#34;&gt;Route variables&lt;/h3&gt;

&lt;p&gt;Some routes need to contain variable components. These can be specified by a leading colon:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$r&lt;/span&gt;, &lt;span class=&#34;synIdentifier&#34;&gt;$id&lt;/span&gt;) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;; &lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$id&lt;/span&gt; };&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In this case, this route doesn&#38;#39;t match just the path &lt;code&gt;/view/:id&lt;/code&gt;, but any path that starts with &lt;code&gt;/view/&lt;/code&gt; and contains exactly one additional path component: &lt;code&gt;/view/24&lt;/code&gt;, &lt;code&gt;/view/c9625979-976a-4cf1-b557-7cf5bd591d0d&lt;/code&gt;, etc. When the code for the route is called, the variable path components will be passed as additional arguments, in order, after the request object.&lt;/p&gt;

&lt;p&gt;Variable routes do make routing more complicated, however, since paths can now potentially match multiple different routes. If a path is given which does match multiple routes, the route with the fewest variable path components is chosen. For instance, given this router:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/:id&#39;&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view_specific_post&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/default&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view_default_post&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;a request for &lt;code&gt;/view/default&lt;/code&gt; will match the &lt;code&gt;view_default_post&lt;/code&gt; route. If there are multiple routes with the fewest variable path components, an error will be thrown (so don&#38;#39;t do that).&lt;/p&gt;

&lt;h4 id=&#34;Optional-routes&#34;&gt;Optional routes&lt;/h4&gt;

&lt;p&gt;Sometimes the path component isn&#38;#39;t actually necessary at all. In this case, you can prefix the path variable with a question mark to indicate that including it is not actually necessary (path components must otherwise be non-empty strings). For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/?:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view_specific_post&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In this case, &lt;code&gt;/view&lt;/code&gt; is also a valid path, and the argument passed to the route&#38;#39;s code will be &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;Validations&#34;&gt;Validations&lt;/h4&gt;

&lt;p&gt;Sometimes you want a bit more control than just &#38;quot;does the path component exist?&#38;quot;. In this case, you can specify constraints to validate the path variables. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view_by_id&#39;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;id&lt;/span&gt; =&#38;gt; { &lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Int&#39;&lt;/span&gt; },&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/:search&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.search&#39;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;search&lt;/span&gt; =&#38;gt; { &lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;qr/^&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;\D+&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;$/&lt;/span&gt; },&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will route &lt;code&gt;/view/123&lt;/code&gt; to &lt;code&gt;view_by_id&lt;/code&gt;, and &lt;code&gt;/view/foobar&lt;/code&gt; to &lt;code&gt;search&lt;/code&gt;. Validations must be specified by a hash following the action spec, where the keys are names of variable path components and the values are hashrefs with an &lt;code&gt;isa&lt;/code&gt; entry. Each validation can be either a Moose type constraint (a type name or a type constraint object) or a regular expression.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-03T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Route Builders and Actions</title><link href="http://ox.iinteractive.com/advent/2012-12-02.html"/><id>http://ox.iinteractive.com/advent/2012-12-02.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;The-route-keyword&#34;&gt;The &lt;code&gt;route&lt;/code&gt; keyword&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;route&lt;/code&gt; keyword maps a &lt;i&gt;path&lt;/i&gt; to an &lt;i&gt;action spec&lt;/i&gt;. A path is a pattern that resembles a URI path, which OX attempts to match against the incoming request URI. An action spec can take many forms, but it essentially describes what code will run when the corresponding path is matched. The path syntax and features will be described tomorrow, but today&#38;#39;s article is about how the action spec is interpreted.&lt;/p&gt;

&lt;h2 id=&#34;Route-builders&#34;&gt;Route builders&lt;/h2&gt;

&lt;p&gt;Route builders are the part of OX which takes an action spec and determines which code to run when its associated path is matched. For instance, in this router:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/posts/:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;/&lt;/code&gt; uses a route builder which just calls the given coderef directly, while &lt;code&gt;/posts/24&lt;/code&gt; uses a route builder which generates a coderef to call the &lt;code&gt;view&lt;/code&gt; method on the &lt;code&gt;posts&lt;/code&gt; controller.&lt;/p&gt;

&lt;p&gt;There are three default route builders for OX applications:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/OX::RouteBuilder::Code&#34;&gt;OX::RouteBuilder::Code&lt;/a&gt;&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; };&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This route builder will be used whenever the action spec is a coderef. It is the most basic route builder - it just allows you to specify a coderef to call when the route is chosen.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/OX::RouteBuilder::ControllerAction&#34;&gt;OX::RouteBuilder::ControllerAction&lt;/a&gt;&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The ControllerAction route builder will be used if the action spec consists of two words (&lt;code&gt;\w+&lt;/code&gt;) separated by a period. Those two words will be used to look up a controller to use and a method to call on that controller. The controller is looked up by name among the attributes on the OX application (really services, but we will discuss that when we explain Bread::Board).&lt;/p&gt;

&lt;p&gt;The code which is run for the above example is roughly equivalent to:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$controller&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;root&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$controller-&#38;gt;index&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;);&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/OX::RouteBuilder::HTTPMethod&#34;&gt;OX::RouteBuilder::HTTPMethod&lt;/a&gt;&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root&#39;&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The HTTPMethod route builder will be used if the action spec consists of a single word (&lt;code&gt;\w+&lt;/code&gt;). This word will be used to look up a controller as in the ControllerAction route builder, but the method to call will be the lowercase version of the HTTP method used (&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, etc). If no appropriate method is found in the class, it will attempt to call the method named &lt;code&gt;any&lt;/code&gt; instead. If that is also not found, the request will return a 405 error.&lt;/p&gt;

&lt;p&gt;The code which is run for the above example is roughly equivalent to:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$r&lt;/span&gt;) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$controller&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;root&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$method&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;lc&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;method&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$method&lt;/span&gt; = &lt;span class=&#34;synConstant&#34;&gt;&#39;any&#39;&lt;/span&gt;             &lt;span class=&#34;synStatement&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;synIdentifier&#34;&gt;$controller-&#38;gt;can&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$method&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;synConstant&#34;&gt;405&lt;/span&gt;, [], [&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;error&#38;quot;&lt;/span&gt;]] &lt;span class=&#34;synStatement&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;synIdentifier&#34;&gt;$controller-&#38;gt;can&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$method&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$controller-&#38;gt;$method&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;);&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also define your own route builders, but doing so will be covered in another article.&lt;/p&gt;

&lt;h2 id=&#34;Actions&#34;&gt;Actions&lt;/h2&gt;

&lt;p&gt;Once OX determines which code to run to fulfill the request, it will call that code. The code that is called will receive an &lt;a href=&#34;https://metacpan.org/module/OX::Request&#34;&gt;OX::Request&lt;/a&gt; object as its first argument (other than the invocant, if called as a method), which can be used to access all of the request information. The action code should return the response to use, which can be any of:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;Any valid &lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; response&lt;/p&gt;

&lt;p&gt;This will be used as-is.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A string&lt;/p&gt;

&lt;p&gt;This will result in a response with a 200 response code and &lt;code&gt;Content-Type&lt;/code&gt; set to &lt;code&gt;text/html&lt;/code&gt;.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;https://metacpan.org/module/OX::Response&#34;&gt;OX::Response&lt;/a&gt; object&lt;/p&gt;

&lt;p&gt;This will use the result of calling the &lt;code&gt;finalize&lt;/code&gt; method. This will typically be generated by calling &lt;code&gt;new_response&lt;/code&gt; on the request object that you receive.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All requests will be decoded and all responses will be encoded as UTF-8 automatically, so your application can deal entirely with Unicode strings. This behavior can be changed if necessary, but we will discuss that in a future post.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-02T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Introduction to OX</title><link href="http://ox.iinteractive.com/advent/2012-12-01.html"/><id>http://ox.iinteractive.com/advent/2012-12-01.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/OX&#34;&gt;OX&lt;/a&gt; is a new web framework, designed to allow you to easily glue together existing components (or write new, highly decoupled components) for your application, without requiring additional plugin systems, glue layers, or global state. It is available on &lt;a href=&#34;https://metacpan.org/module/OX&#34;&gt;CPAN&lt;/a&gt;, and on &lt;a href=&#34;http://github.com/iinteractive/OX&#34;&gt;GitHub&lt;/a&gt;. You can install it via &lt;code&gt;cpanm OX&lt;/code&gt;. If you have any questions or suggestions, we hang out on the &lt;code&gt;#ox&lt;/code&gt; channel on irc.perl.org, so feel free to drop by!&lt;/p&gt;

&lt;p&gt;OX is based on three main components:&lt;/p&gt;

&lt;h3 id=&#34;Plack&#34;&gt;Plack&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Plack&#34;&gt;Plack&lt;/a&gt; is an implementation of the &lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; protocol. By implementing PSGI, OX can run on any server platform that PSGI supports (which is most of them). Plack also provides extra functionality such as middleware, which OX exposes to application authors (as will be described in future articles).&lt;/p&gt;

&lt;h3 id=&#34;Bread::Board&#34;&gt;Bread::Board&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt; is a dependency injection framework, used to structure your application initialization. It allows your application objects to access each other without the need for globals or repetitive argument passing. With Bread::Board, you can write your application classes however makes sense to you, and then tie them all together.&lt;/p&gt;

&lt;h3 id=&#34;Path::Router&#34;&gt;Path::Router&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Path::Router&#34;&gt;Path::Router&lt;/a&gt; provides simple, reversible routing for URL paths. In addition to basic path matching, it supports variable path components (with optional validation), the ability to look up paths based on the descriptions they were defined with, and useful debugging and testing tools. It&#38;#39;s used to determine your application&#38;#39;s URL structure.&lt;/p&gt;

&lt;h2 id=&#34;Hello-World&#34;&gt;Hello World&lt;/h2&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This defines a simple &#38;quot;Hello world&#38;quot; application. This snippet is a valid &lt;code&gt;.psgi&lt;/code&gt; file (the format used by &lt;a href=&#34;https://metacpan.org/module/Plack&#34;&gt;Plack&lt;/a&gt;), since the &lt;code&gt;router&lt;/code&gt; keyword returns a PSGI application coderef if necessary.&lt;/p&gt;



If you download this example &lt;a href=&#34;hello.psgi&#34;&gt;here&lt;/a&gt;, you can run it with
&lt;tt&gt;plackup hello.psgi&lt;/tt&gt;, and view the results in your browser.

&lt;p&gt;The router block is the most important part of an OX application. It defines the entire URL structure in one place, making tracing the code that is run for a given request as easy as possible to find. Simple routes can define the code to be run directly, but for anything non-trivial, you&#38;#39;ll want to organize the code into models, controllers, etc., as shown in this next example.&lt;/p&gt;

&lt;h2 id=&#34;Another-example&#34;&gt;Another example&lt;/h2&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;br /&gt;33:&#38;nbsp;&lt;br /&gt;34:&#38;nbsp;&lt;br /&gt;35:&#38;nbsp;&lt;br /&gt;36:&#38;nbsp;&lt;br /&gt;37:&#38;nbsp;&lt;br /&gt;38:&#38;nbsp;&lt;br /&gt;39:&#38;nbsp;&lt;br /&gt;40:&#38;nbsp;&lt;br /&gt;41:&#38;nbsp;&lt;br /&gt;42:&#38;nbsp;&lt;br /&gt;43:&#38;nbsp;&lt;br /&gt;44:&#38;nbsp;&lt;br /&gt;45:&#38;nbsp;&lt;br /&gt;46:&#38;nbsp;&lt;br /&gt;47:&#38;nbsp;&lt;br /&gt;48:&#38;nbsp;&lt;br /&gt;49:&#38;nbsp;&lt;br /&gt;50:&#38;nbsp;&lt;br /&gt;51:&#38;nbsp;&lt;br /&gt;52:&#38;nbsp;&lt;br /&gt;53:&#38;nbsp;&lt;br /&gt;54:&#38;nbsp;&lt;br /&gt;55:&#38;nbsp;&lt;br /&gt;56:&#38;nbsp;&lt;br /&gt;57:&#38;nbsp;&lt;br /&gt;58:&#38;nbsp;&lt;br /&gt;59:&#38;nbsp;&lt;br /&gt;60:&#38;nbsp;&lt;br /&gt;61:&#38;nbsp;&lt;br /&gt;62:&#38;nbsp;&lt;br /&gt;63:&#38;nbsp;&lt;br /&gt;64:&#38;nbsp;&lt;br /&gt;65:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; Counter::Model&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Moose;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;counter&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;traits&lt;/span&gt;  =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;Counter&#39;&lt;/span&gt;],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Int&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;default&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;0&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;handles&lt;/span&gt; =&#38;gt; {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;inc&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;inc&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dec&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dec&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;reset&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;reset&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; Counter::Controller&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Moose;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;       =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Counter::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;required&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;index &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;model-&#38;gt;counter&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;inc &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;model-&#38;gt;inc&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;dec &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;model-&#38;gt;dec&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;reset &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;model-&#38;gt;reset&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; Counter&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;        =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;       =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Counter::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;lifecycle&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Singleton&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Counter::Controller&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;infer&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;controller.index&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/inc&#39;&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;controller.inc&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/dec&#39;&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;controller.dec&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/reset&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;controller.reset&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This is a slightly more involved example. Here, paths are routed to methods on controller objects, and OX automatically figures out (via Bread::Board) how to create all of the objects necessary to make the request work.&lt;/p&gt;



This example can be downloaded &lt;a href=&#34;counter.psgi&#34;&gt;here&lt;/a&gt;, and run via
&lt;tt&gt;plackup counter.psgi&lt;/tt&gt;. Access the &lt;tt&gt;/inc&lt;/tt&gt;, &lt;tt&gt;/dec&lt;/tt&gt;, and
&lt;tt&gt;/reset&lt;/tt&gt; paths to manipulate the counter.

&lt;p&gt;One interesting thing to note is how the controller and model are both just normal Moose classes - there is nothing special about them at all. Your application can be structured in any way that you want, and OX will do the work of introspecting and tying together all of the pieces. We will explain how exactly this works over the coming weeks.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-01T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry></feed>