<?xml version="1.0" encoding="us-ascii"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OX Advent Calendar</title><id>http://ox.iinteractive.com/advent/</id><link href="http://ox.iinteractive.com/advent/atom.xml" rel="self"/><updated>2012-12-15T03:02:10-06:00</updated><author><name>Jesse Luehrs</name></author><generator uri="http://search.cpan.org/dist/XML-Atom-SimpleFeed/" version="0.86">XML::Atom::SimpleFeed</generator><entry><title>Options For Simple Authentication</title><link href="http://ox.iinteractive.com/advent/2012-12-15.html"/><id>http://ox.iinteractive.com/advent/2012-12-15.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Selective-Sharing&#34;&gt;Selective Sharing&lt;/h2&gt;

&lt;p&gt;As we&#38;#39;ve seen, one of the nice things about the OX framework is how it exemplifies and amplifies the whipuptitude nature of Perl. It&#38;#39;s easy to go from a wild idea to a single file proof-of-concept level implementation with OX, and then later refactor that prototype into your &#38;quot;real&#38;quot; application.&lt;/p&gt;

&lt;p&gt;Personally, I find there&#38;#39;s usually a point between &#38;quot;prototype&#38;quot; and &#38;quot;alpha&#38;quot; where I want to share my work with other people to get their feedback. That usually means putting it on an Internet-accessible server and mailing my collaborators the URL -- and that also means I need to put some sort of authentication wrapper around the prototype, so that the whole world can&#38;#39;t see my work in progress.&lt;/p&gt;

&lt;p&gt;One option is to wait to share your prototype until you&#38;#39;ve gotten to the point of implementing the required amount of authentication in the application itself. This may be a ways down the road, however, and it&#38;#39;s hard to wait to share. Another option is to put some HTTP Basic-style authentication in place via Apache &lt;code&gt;.htaccess&lt;/code&gt; files, but that requires some sysadmin style tinkering with htpasswd files and probably with your web server configuration.&lt;/p&gt;

&lt;p&gt;Since OX builds upon Plack/PSGI, a more attractive alternative is to leverage existing Plack middleware to add authentication directly to the prototype application. We can add either HTTP Basic style authentication, or a full-blown form-based login. Let&#38;#39;s see what each of those looks like.&lt;/p&gt;

&lt;h2 id=&#34;Plack::Middleware::Auth::Basic&#34;&gt;Plack::Middleware::Auth::Basic&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Auth::Basic&#34;&gt;Plack::Middleware::Auth::Basic&lt;/a&gt;, as you might guess from the module name, is a middleware that implements basic types of authentication for your application. The module takes an &lt;code&gt;authenticator&lt;/code&gt; configuration option, which can be an object that implements an &lt;code&gt;authenticate&lt;/code&gt; method (with a &lt;code&gt;($username,$password)&lt;/code&gt; signature) or a simple callback function, which will also be called with the username and password provided in response to the authentication dialogue. This means an OX application implementing basic authentication can be as simple as:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyOXsomeApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;wrap &lt;span class=&#34;synConstant&#34;&gt;&#39;Plack::Middleware::Auth::Basic&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;authenticator&lt;/span&gt; =&#38;gt; literal( &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt;( &lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt;, &lt;span class=&#34;synIdentifier&#34;&gt;$pass&lt;/span&gt; ) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;s00per&#39;&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$pass&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;s3kr1t&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;} ),&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;realm&lt;/span&gt; =&#38;gt; literal( &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;my awesome app!&#38;quot;&lt;/span&gt; ),&lt;br /&gt;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;realm&lt;/code&gt; option being passed to the middleware is used to control what is displayed in the pop-up window that appears when the web browser prompts for credentials. Since &lt;code&gt;wrap&lt;/code&gt; stanzas in the &lt;code&gt;router&lt;/code&gt; statement do the same sort of &lt;code&gt;Bread::Board&lt;/code&gt;-based service resolution as other parts of &lt;code&gt;OX&lt;/code&gt;, you could also use attributes for the &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Auth::Basic&#34;&gt;Plack::Middleware::Auth::Basic&lt;/a&gt; parameters, like so:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyOXsomeApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;basic_auth_realm&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;My Awesome App!&#39;&lt;/span&gt;&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;wrap &lt;span class=&#34;synConstant&#34;&gt;&#39;Plack::Middleware::Auth::Basic&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;authenticator&lt;/span&gt; =&#38;gt; literal( &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; ( &lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt; , &lt;span class=&#34;synIdentifier&#34;&gt;$pass&lt;/span&gt; ) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;s00per&#39;&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$pass&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;s3kr1t&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;} ),&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;realm&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;basic_auth_realm&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;



(Note: you can download this application
&lt;a href=&#34;basic.psgi&#34;&gt;here&lt;/a&gt;.)

&lt;h2 id=&#34;Plack::Middleware::Auth::Form&#34;&gt;Plack::Middleware::Auth::Form&lt;/h2&gt;

&lt;p&gt;HTTP Basic-style authentication is great when you need a quick way to secure access to an entire application. However, if you&#38;#39;re trying to prototype an application that will have some areas that require authentication and some that don&#38;#39;t, it may not be the best choice. Instead, consider &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Auth::Form&#34;&gt;Plack::Middleware::Auth::Form&lt;/a&gt;, which adds &lt;code&gt;/login&lt;/code&gt; and &lt;code&gt;/logout&lt;/code&gt; endpoints to your application. You&#38;#39;ll also want to load &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Session&#34;&gt;Plack::Middleware::Session&lt;/a&gt; to provide a way to store details such as the username of the current user. &lt;code&gt;Plack::Middleware::Auth::Form&lt;/code&gt; is configured very similarly to &lt;code&gt;Plack::Middleware::Auth::Basic&lt;/code&gt; -- the required &lt;code&gt;authenticator&lt;/code&gt; option works exactly as described above, in fact.&lt;/p&gt;

&lt;p&gt;Here&#38;#39;s a simple OX application that uses form-based authentication to control access to the &lt;code&gt;/admin&lt;/code&gt; endpoint, while allowing unauthenticated access for &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyOXsomeApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;HTTP::Throwable::Factory &lt;span class=&#34;synConstant&#34;&gt;qw/ http_throw /&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;wrap &lt;span class=&#34;synConstant&#34;&gt;&#39;Plack::Middleware::Session&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;store&lt;/span&gt; =&#38;gt; literal( &lt;span class=&#34;synConstant&#34;&gt;&#39;File&#39;&lt;/span&gt; ),&lt;br /&gt;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;wrap &lt;span class=&#34;synConstant&#34;&gt;&#39;Plack::Middleware::Auth::Form&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;authenticator&lt;/span&gt; =&#38;gt; literal( &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; ( &lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt;, &lt;span class=&#34;synIdentifier&#34;&gt;$pass&lt;/span&gt; ) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;s00per&#39;&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$pass&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;s3kr1t&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;} ),&lt;br /&gt;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/admin&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; ( &lt;span class=&#34;synIdentifier&#34;&gt;$request&lt;/span&gt; ) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;unless&lt;/span&gt; ( &lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$request-&#38;gt;session-&#38;gt;{&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt; ) {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$request-&#38;gt;session-&#38;gt;{&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;redir_to&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt; = &lt;span class=&#34;synConstant&#34;&gt;&#39;/admin&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;http_throw( &lt;span class=&#34;synConstant&#34;&gt;Found&lt;/span&gt; =&#38;gt; { &lt;span class=&#34;synConstant&#34;&gt;location&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;/login&#39;&lt;/span&gt; } );&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;}&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;admin section!&#38;lt;br/&#38;gt;hello &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$user&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;!&#38;quot;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;};&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;



(Note: you can download this application
&lt;a href=&#34;form.psgi&#34;&gt;here&lt;/a&gt;.)

&lt;p&gt;Here we have the same &lt;code&gt;authenticator&lt;/code&gt; callback as in the previous example, but we&#38;#39;re using &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Auth::Form&#34;&gt;Plack::Middleware::Auth::Form&lt;/a&gt; instead. You should be able to load the &lt;code&gt;/&lt;/code&gt; endpoint without being prompted for a password, but attempting to load &lt;code&gt;/admin&lt;/code&gt; should result in you being redirected to &lt;code&gt;/login&lt;/code&gt;, which will display a simple login form.&lt;/p&gt;

&lt;p&gt;Looking at the inline sub for the &lt;code&gt;/admin&lt;/code&gt; route, we see that we&#38;#39;re looking at the PSGI session hash (available via the &lt;code&gt;session&lt;/code&gt; method on the &lt;code&gt;$request&lt;/code&gt; object that is passed to the action) to see if there&#38;#39;s a &lt;code&gt;user_id&lt;/code&gt; key. If there is, that means we have a logged-in user, and can fall past the conditional and return a string to display. If we don&#38;#39;t see a value in this key, however, that means we don&#38;#39;t have a logged in user, and we want to display the login form instead. We can easily accomplish this by throwing a &lt;a href=&#34;https://metacpan.org/module/HTTP::Throwable&#34;&gt;HTTP::Throwable&lt;/a&gt; exception, as described in Monday&#38;#39;s article.&lt;/p&gt;

&lt;p&gt;(&lt;i&gt;N.B.&lt;/i&gt;, if you were implementing this type of authentication in a real application, you&#38;#39;d want to either wrap up the code that checks for an active user and issues a redirect to &lt;code&gt;/login&lt;/code&gt; inside a role that could be consumed by controller modules that needed this functionality, or implement the logic as a middleware.)&lt;/p&gt;

&lt;h2 id=&#34;Next-steps&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;When you&#38;#39;re ready to move beyond the &#38;quot;prototype&#38;quot; stage of your application, you&#38;#39;ll find yourself wanting to authenticate against information you&#38;#39;ve got stored in a database (or another type of data store that you&#38;#39;ve abstracted behind a model-layer module). You&#38;#39;ll also want a login form that fits into the look-and-feel of the rest of your site, ideally one that renders and validates input via the same modules as the rest of your view layer. At that point, you&#38;#39;ll probably want to drop &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Auth::Form&#34;&gt;Plack::Middleware::Auth::Form&lt;/a&gt; in favor of your own code. We&#38;#39;ll leave that step as an exercise for the reader (at least for the moment...)&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-15T00:00:00-06:00</updated><author><name>John SJ Anderson</name></author></entry><entry><title>More Bread::Board</title><link href="http://ox.iinteractive.com/advent/2012-12-14.html"/><id>http://ox.iinteractive.com/advent/2012-12-14.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Typemaps-and-Dependency-Inference&#34;&gt;Typemaps and Dependency Inference&lt;/h2&gt;

&lt;p&gt;Most of the classes in your application will probably only need to be instantiated in one way. You probably won&#38;#39;t have multiple instances of a model class, for instance. This means that when you mention the model class in one of your controller classes, it&#38;#39;s unambiguous what you&#38;#39;re actually asking for - there&#38;#39;s no reason that you should need to explicitly list it as a dependency, since it&#38;#39;s already listed as the type constraint in the controller. Bread::Board understands this, and can be used to automatically introspect the dependency list for your classes via the attributes that they declare.&lt;/p&gt;

&lt;p&gt;Given an application like this:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;br /&gt;33:&#38;nbsp;&lt;br /&gt;34:&#38;nbsp;&lt;br /&gt;35:&#38;nbsp;&lt;br /&gt;36:&#38;nbsp;&lt;br /&gt;37:&#38;nbsp;&lt;br /&gt;38:&#38;nbsp;&lt;br /&gt;39:&#38;nbsp;&lt;br /&gt;40:&#38;nbsp;&lt;br /&gt;41:&#38;nbsp;&lt;br /&gt;42:&#38;nbsp;&lt;br /&gt;43:&#38;nbsp;&lt;br /&gt;44:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp::Model&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Moose;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;dsn&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;       =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;required&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp::Controller&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Moose;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;       =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;required&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synComment&#34;&gt;# ...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;dsn&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dbi:mysql:myapp&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synComment&#34;&gt;# ...&lt;/span&gt;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;we can instead tell Bread::Board to &lt;i&gt;infer&lt;/i&gt; the dependencies for the controller service:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;infer&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;,&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This looks through all of the required attributes in MyApp::Controller, finds the ones with type constraints that correspond to classes, and looks for services in the OX application whose type constraints correspond to those classes. Any services that it finds are automatically added to the list of dependencies that the service explicitly specifies (if any). This can&#38;#39;t entirely replace manually specifying dependencies, but it can greatly simplify them.&lt;/p&gt;

&lt;h2 id=&#34;Lifecycles&#34;&gt;Lifecycles&lt;/h2&gt;

&lt;p&gt;By default, any time a service is resolved, a new instance is created. This is generally what you want (to avoid inadvertently leaking data between requests), but sometimes persisting data is necessary. For instance, you probably don&#38;#39;t want to reconnect to the database on every single request, if performance is important for your application. In this case, you can specify a different &lt;i&gt;lifecycle&lt;/i&gt; for a particular service:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;dsn&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dbi:mysql:myapp&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;dbh&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;lifecycle&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Singleton&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;block&lt;/span&gt;        =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$s&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; DBI-&#38;gt;&lt;span class=&#34;synStatement&#34;&gt;connect&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$s-&#38;gt;param&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;));&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;dbh&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Here, the &lt;code&gt;dbh&lt;/code&gt; service will be instantiated the first time that it is requested, but then every subsequent time, it will return the same instance. In this example, every time the &lt;code&gt;model&lt;/code&gt; service is resolved, a new MyApp::Model instance will be created, but each of those instances will use the same &lt;code&gt;dbh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition to the &lt;code&gt;Singleton&lt;/code&gt; lifecycle, you can also specify a &lt;code&gt;Request&lt;/code&gt; lifecycle. This will act like &lt;code&gt;Singleton&lt;/code&gt;, except that the cached value will be cleared between requests.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-14T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Roles and Inheritance</title><link href="http://ox.iinteractive.com/advent/2012-12-13.html"/><id>http://ox.iinteractive.com/advent/2012-12-13.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Roles&#34;&gt;Roles&lt;/h2&gt;

&lt;p&gt;OX applications are just a special type of Moose class, and this includes supporting role application. You can define roles for various parts of your application, and then compose them into the main application class. The only difference is that in order to support composition of things like routes and services, you will need to &lt;code&gt;use&lt;/code&gt; the &lt;a href=&#34;https://metacpan.org/module/OX::Role&#34;&gt;OX::Role&lt;/a&gt; module instead of &lt;a href=&#34;https://metacpan.org/module/Moose::Role&#34;&gt;Moose::Role&lt;/a&gt;. This will provide the appropriate support for defining router components and services.&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;br /&gt;33:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp::Auth&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX::Role;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;auth&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller::Auth&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/login&#39;&lt;/span&gt;  =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;auth.login&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/logout&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;auth.logout&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;with &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Auth&#39;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;  =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;root&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller::Root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Here, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;/login&lt;/code&gt;, and &lt;code&gt;/logout&lt;/code&gt; will all be valid routes for the application - the role composition process will merge the routes defined in each role into the main application&#38;#39;s router. This follows the normal role composition algorithm, so you can do things like override a route from a role by defining a new route for the same path in the class:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;  =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;root&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller::Root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/login&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.login&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;with &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Auth&#39;&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Here, &lt;code&gt;/login&lt;/code&gt; will call the &lt;code&gt;root.login&lt;/code&gt; action rather than the &lt;code&gt;auth.login&lt;/code&gt; action. Note how the role application needs to happen at the end in this case, since otherwise OX will think you are trying to define a route for a path that already has a route defined for it and throw an error (this is effectively the same kind of ordering issue that sometimes comes up in Moose roles with method modifiers).&lt;/p&gt;

&lt;p&gt;One other thing to note is that roles don&#38;#39;t support the &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;wrap_if&lt;/code&gt; keywords. This is because middleware application is really an application-global effect, and so middleware defined in a role would affect not only routes defined in that role, but all routes defined in the class (and other roles that the class consumes). This could potentially be quite confusing, so we currently don&#38;#39;t allow it. This may change in the future if we can come up with a way to make this make more sense.&lt;/p&gt;

&lt;h2 id=&#34;Inheritance&#34;&gt;Inheritance&lt;/h2&gt;

&lt;p&gt;OX applications also support inheritance. Not only can attributes and methods be overridden as expected, but routes, mounts, and middleware also participate in inheritance. This provides a level of reuse by allowing you to create another application with the same basic structure, but a few extra features.&lt;/p&gt;

&lt;p&gt;For instance, if you have an application that looks like this:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;dsn&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dbi:mysql:myapp&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;root&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller::Root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;         =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/register&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.register&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/login&#39;&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.login&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;you can create a specialization of it for testing via something like this:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp::Test&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;extends &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp&#39;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;&#39;+dsn&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dbi:SQLite::memory:&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;debug&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller::Debug&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/dump_users&#39;&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;debug.dump_users&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/dump_accesses&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;debug.dump_accesses&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This way, the application will always access an in-memory database (rather than your actual production database), and it provides a couple extra endpoints to test that the underlying code is working properly. You can then use MyApp::Test in your test suite instead of MyApp, and have an application that just works properly in a test environment, rather than having to specially configure your real application every time.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-13T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Back To Basics</title><link href="http://ox.iinteractive.com/advent/2012-12-12.html"/><id>http://ox.iinteractive.com/advent/2012-12-12.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Round-And-Round-It-Goes&#34;&gt;Round And Round It Goes&lt;/h2&gt;

&lt;p&gt;At this point, you&#38;#39;ve had almost 2 weeks worth of in-depth details about the &lt;a href=&#34;https://metacpan.org/module/OX&#34;&gt;OX&lt;/a&gt; framework, including entries &lt;a href=&#34;https://metacpan.org/module/Path::Router&#34;&gt;Path::Router&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Declare&#34;&gt;Bread::Board::Declare&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/OX::Request&#34;&gt;OX::Request&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/module/OX::Response&#34;&gt;OX::Response&lt;/a&gt;, and Plack, PSGI, and more middleware than you can shake a stick at. After that deep dive into all the components that you &lt;i&gt;can&lt;/i&gt; make use of in an OX application, it&#38;#39;s a good time to step back and look at the big picture again, and review what I consider to be one of OX&#38;#39;s greatest strengths: the way it allows you to develop applications across a wide range of scales, and to iteratively move from one scale to another as the complexity of your application changes over time. Like so-called micro-frameworks, OX allows you to start developing an application as a single simple module -- and then over time, if the complexity of the problem calls for it, you can iteratively evolve your app into a multi-module monster, with a full MVC-oriented architecture (or MVA, or whatever the flavor du jour design pattern is). Because OX applications are really just Moose applications, they can be as simple or as complex as you need.&lt;/p&gt;

&lt;h2 id=&#34;My-Pomodoro-Technique-Is-Almost-Unstoppable&#34;&gt;My Pomodoro Technique Is (Almost) Unstoppable&lt;/h2&gt;

&lt;p&gt;Let&#38;#39;s say you wanted to develop a simple web-based application to help you use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pomodoro_Technique&#34;&gt;Pomodoro Technique&lt;/a&gt; during your daily work. The basic principle of this technique is alternating periods of work (typically 25 or 50 minutes long) with short breaks (usually 5 to 10 minutes). Each cycle is called a &#38;quot;pomodoro&#38;quot;, and every three to four pomodoros, you take a longer break (usually 30 minutes). During the course of a single pomodoro, you focus exclusively on finishing a single task, such as implementing a new feature or fixing a bug.&lt;/p&gt;

&lt;p&gt;I like the Pomodoro Technique quite a bit, and I have found that on those days when I don&#38;#39;t have a lot of external interruptions (meetings, client phone calls, etc.), it&#38;#39;s a really good way to balance staying focused on work with making sure I don&#38;#39;t completely lose track of time or the overall structure of my day. I can make a rough plan at the beginning of the day -- this many pomodoros on this task, this many on that -- and then I have a rough outline for how my day should go.&lt;/p&gt;

&lt;p&gt;The biggest problem I have with my Pomodoro Technique -- aside from those pesky client calls! -- is keeping track of which pomodoro I&#38;#39;m on to know when I should take my longer break. Was that the third or the fourth pomodoro? The fourth or the fifth? I frequently have that longer break set aside as a time to eat lunch, run an errand, or go for a walk or jog, so I want to make sure I take care of those things as well.&lt;/p&gt;

&lt;h2 id=&#34;PomodorOX-To-The-Rescue&#34;&gt;PomodorOX To The Rescue&lt;/h2&gt;

&lt;p&gt;Let&#38;#39;s make the simplest possible OX application to track which Pomodoro we&#38;#39;re on at any given point. Since this is going to be something I run locally and that typically won&#38;#39;t be seen by anybody other than me, it can be as ugly... I mean, as simple and pragmatically efficient, as it needs to be. I spent about one pomodoro on this problem, and what I came up with looks like this:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; PomodorOX&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Lingua::EN::Numbers &lt;span class=&#34;synConstant&#34;&gt;qw/ num2en_ordinal /&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$goal&lt;/span&gt;   = &lt;span class=&#34;synConstant&#34;&gt;12&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$done&lt;/span&gt;   = &lt;span class=&#34;synConstant&#34;&gt;0&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt;  = &lt;span class=&#34;synConstant&#34;&gt;&#39;initial&#39;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$ord&lt;/span&gt; = num2en_ordinal( &lt;span class=&#34;synIdentifier&#34;&gt;$done&lt;/span&gt;+&lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt; );&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$label&lt;/span&gt; = ( &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;break&#39;&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;initial&#39;&lt;/span&gt;) ?&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Start &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$ord&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt; pomodoro&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Finish &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$ord&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt; pomodoro and take a break&#38;quot;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;if&lt;/span&gt; ( &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;pomo&#39;&lt;/span&gt; ) {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; = &lt;span class=&#34;synConstant&#34;&gt;&#39;break&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$done&lt;/span&gt;++;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;}&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;else&lt;/span&gt; { &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; = &lt;span class=&#34;synConstant&#34;&gt;&#39;pomo&#39;&lt;/span&gt; }&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#38;lt;&#38;lt;EOHTML;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;lt;p&#38;gt;POMODOROS DONE / PLANNED: &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$done&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt; / &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$goal&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;lt;input type=&#38;quot;button&#38;quot; value=&#38;quot;&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$label&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot; onclick=&#38;quot;window.location = &#39;/&#39;;&#38;quot; /&#38;gt;&#38;lt;/p&#38;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;EOHTML&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;};&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This simple module implements a simple pomodoro tracker, which will keep track of how many pomodoros you&#38;#39;ve completed over the course of the day. As we saw way back in day 1, since the &lt;code&gt;router&lt;/code&gt; block returns a valid PSGI application, you can load this module directly with &lt;code&gt;plackup&lt;/code&gt; to run this application.&lt;/p&gt;



(Note: you can download this application
&lt;a href=&#34;pomodoro.psgi&#34;&gt;here&lt;/a&gt;.)

&lt;h2 id=&#34;Evolve-Or-Die&#34;&gt;Evolve Or Die&lt;/h2&gt;

&lt;p&gt;One could code this simple application in any of a number of Perl web frameworks and it would look essentially the same -- what&#38;#39;s the advantage of OX, exactly? The advantage, as I said above, is in the way the OX framework allows you to iteratively evolve an application without huge changes in the application structure. For example, let&#38;#39;s say you decided that you wanted to load the goal -- the number of Pomodoros you&#38;#39;re trying to do in a day -- from a config file instead of hard-coding it. That might look like this:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;br /&gt;33:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; PomodorOX&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;5.012&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Lingua::EN::Numbers &lt;span class=&#34;synConstant&#34;&gt;qw/ num2en_ordinal /&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;YAML                &lt;span class=&#34;synConstant&#34;&gt;qw/ LoadFile /&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$config&lt;/span&gt; = LoadFile( &lt;span class=&#34;synConstant&#34;&gt;&#39;pomodorox.yaml&#39;&lt;/span&gt; );&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$goal&lt;/span&gt;   = &lt;span class=&#34;synIdentifier&#34;&gt;$config-&#38;gt;{&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;goal&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt; // &lt;span class=&#34;synConstant&#34;&gt;12&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$done&lt;/span&gt;   = &lt;span class=&#34;synConstant&#34;&gt;0&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt;  = &lt;span class=&#34;synConstant&#34;&gt;&#39;initial&#39;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$ord&lt;/span&gt; = num2en_ordinal( &lt;span class=&#34;synIdentifier&#34;&gt;$done&lt;/span&gt;+&lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt; );&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$label&lt;/span&gt; = ( &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;break&#39;&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;initial&#39;&lt;/span&gt;) ?&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Start &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$ord&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt; pomodoro&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Finish &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$ord&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt; pomodoro and take a break&#38;quot;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;if&lt;/span&gt; ( &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;pomo&#39;&lt;/span&gt; ) {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; = &lt;span class=&#34;synConstant&#34;&gt;&#39;break&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$done&lt;/span&gt;++;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;}&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;else&lt;/span&gt; { &lt;span class=&#34;synIdentifier&#34;&gt;$state&lt;/span&gt; = &lt;span class=&#34;synConstant&#34;&gt;&#39;pomo&#39;&lt;/span&gt; }&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#38;lt;&#38;lt;EOHTML;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;lt;p&#38;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;  POMODOROS DONE / PLANNED: &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$done&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt; / &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$goal&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;  &#38;lt;input type=&#38;quot;button&#38;quot; value=&#38;quot;&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$label&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot; onclick=&#38;quot;window.location = &#39;/&#39;;&#38;quot; /&#38;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;lt;/p&#38;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;EOHTML&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;};&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Only lines 6-9 would need to change to add a configuration file. Further, because OX is completely configuration-system agnostic, you don&#38;#39;t have to use &lt;a href=&#34;https://metacpan.org/module/YAML&#34;&gt;YAML&lt;/a&gt;. You could use &lt;a href=&#34;https://metacpan.org/module/Config::General&#34;&gt;Config::General&lt;/a&gt;, or &lt;a href=&#34;https://metacpan.org/module/XML::Simple&#34;&gt;XML::Simple&lt;/a&gt;, or roll your own &lt;code&gt;PomodorOX::Config&lt;/code&gt; module.&lt;/p&gt;

&lt;h2 id=&#34;Longest-Journey-Single-Step-You-Know-The-Drill&#34;&gt;Longest Journey, Single Step, You Know The Drill&lt;/h2&gt;

&lt;p&gt;The point of this article is not that you need to start all your web applications with a single module design. That would be silly. The point is also not that you should use the Pomodoro Technique -- although you may want to give it a shot.&lt;/p&gt;

&lt;p&gt;No, the point of this article is that, while OX does build on a number of components, and on some concepts (such as dependency injection and inversion of control) that have a reputation as being somewhat difficult to get ones head around, you don&#38;#39;t really have to deal with those concepts to start using OX. You can start making useful web applications using only the simplest parts of &lt;a href=&#34;https://metacpan.org/module/Path::Router&#34;&gt;Path::Router&lt;/a&gt;, and move on up to the capabilities that the &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Declare&#34;&gt;Bread::Board::Declare&lt;/a&gt;-based service resolution gives you once you get to the point where your application needs it.&lt;/p&gt;

&lt;p&gt;So block out a pomodoro or two today, and make a simple OX app. (If you can&#38;#39;t think of anything special to do, make PomodorOX suck just a tiny bit less.) Once you&#38;#39;ve got that app working, add another bit of functionality. When you&#38;#39;ve gotten it to the point where you really want to refactor that inline action path out of the router block, then you&#38;#39;re ready to go back and review the first few days in this calendar, and join &lt;code&gt;#ox&lt;/code&gt; and start asking questions.&lt;/p&gt;

&lt;p&gt;Happy coding and happy holidays!&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-12T00:00:00-06:00</updated><author><name>John SJ Anderson</name></author></entry><entry><title>Deployment</title><link href="http://ox.iinteractive.com/advent/2012-12-11.html"/><id>http://ox.iinteractive.com/advent/2012-12-11.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Plack&#34;&gt;Plack&lt;/h2&gt;

&lt;p&gt;OX interacts with web servers entirely via PSGI. This means that you can use any of the tools provided by &lt;a href=&#34;https://metacpan.org/module/Plack&#34;&gt;Plack&lt;/a&gt; to manage and deploy your OX applications. Plack provides functionality to run your app on many different application servers, tools to manage your application during development and deployment, and several middleware classes to fix deployment issues in various situations.&lt;/p&gt;

&lt;h3 id=&#34;app.psgi-and-plackup&#34;&gt;&lt;code&gt;app.psgi&lt;/code&gt; and &lt;code&gt;plackup&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Plack&#38;#39;s tools typically interact with applications via &lt;code&gt;.psgi&lt;/code&gt; files. This is a file which, when evaluated, returns a PSGI application coderef. As mentioned previously, an OX application as typically written is a valid &lt;code&gt;.psgi&lt;/code&gt; file:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synComment&#34;&gt;# app.psgi&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;but this quickly becomes unwieldy. Splitting your application into multiple packages and files is important not only for code organization, but also because having a split between code that is inherent to your application and code that is specific to deployment makes the deployment process much easier. For instance, if your application uses sessions, the &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Session&#34;&gt;Session&lt;/a&gt; middleware is conceptually part of the application itself - running the application without that middleware applied doesn&#38;#39;t make a lot of sense. On the other hand, the &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::ReverseProxy&#34;&gt;ReverseProxy&lt;/a&gt; middleware is dependent on your deployment environment - declaring that in your application doesn&#38;#39;t make sense because you might run your same application in several different environments, only some of which use a reverse proxy.&lt;/p&gt;

&lt;p&gt;The typical way that OX applications are written is to write them as a class:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synComment&#34;&gt;# Hello.pm&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; Hello&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;and then write an &lt;code&gt;app.psgi&lt;/code&gt; file which instantiates the application:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synComment&#34;&gt;# app.psgi&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Hello;&lt;br /&gt;Hello-&#38;gt;new-&#38;gt;to_app;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This way, you can easily add additional deployment-specific code to just the &lt;code&gt;app.psgi&lt;/code&gt; file, to do whatever you need to do:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synComment&#34;&gt;# app.psgi&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Hello;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Plack::Middleware::ReverseProxy;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$app&lt;/span&gt; = Hello-&#38;gt;new-&#38;gt;to_app;&lt;br /&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$app&lt;/span&gt; = Plack::Middleware::ReverseProxy-&#38;gt;wrap(&lt;span class=&#34;synIdentifier&#34;&gt;$app&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$app&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Plack::Builder&#34;&gt;Plack::Builder&lt;/a&gt; can also be helpful for this.&lt;/p&gt;

&lt;h2 id=&#34;Servers&#34;&gt;Servers&lt;/h2&gt;

&lt;p&gt;Now that we have an &lt;code&gt;app.psgi&lt;/code&gt; file, we can run the application in any application server supported by &lt;a href=&#34;https://metacpan.org/module/Plack::Loader&#34;&gt;Plack::Loader&lt;/a&gt;. By default, if you just run &lt;code&gt;plackup&lt;/code&gt;, it will run your application using &lt;a href=&#34;https://metacpan.org/module/HTTP::Server::PSGI&#34;&gt;HTTP::Server::PSGI&lt;/a&gt;. This is a simple, single-process server which can be used during development. For your actual deployment, however, you&#38;#39;ll likely want to use a more fully-featured server.&lt;/p&gt;

&lt;p&gt;By passing the &lt;code&gt;-s&lt;/code&gt; option to &lt;code&gt;plackup&lt;/code&gt;, you can use any application server which has a corresponding &lt;a href=&#34;https://metacpan.org/module/Plack::Handler&#34;&gt;Plack::Handler&lt;/a&gt; class. &lt;a href=&#34;https://metacpan.org/module/Starman&#34;&gt;Starman&lt;/a&gt; is a good example of a production-ready application server. It is fast, preforking, and supports all of HTTP/1.1. A typical Starman deployment involves running your application with starman as a normal user on a port that isn&#38;#39;t exposed to the public, and then running a reverse proxy of some sort in front of it. This ensures that you don&#38;#39;t need to run your application itself as root, and also prevents attacks like &lt;a href=&#34;http://en.wikipedia.org/wiki/Slowloris&#34;&gt;Slowloris&lt;/a&gt;, which Starman on its own would otherwise be vulnerable to.&lt;/p&gt;

&lt;p&gt;To run Starman, you can pass &lt;code&gt;-s Starman&lt;/code&gt; to your &lt;code&gt;plackup&lt;/code&gt; invocation, or you can use the &lt;code&gt;starman&lt;/code&gt; runner script instead (which has more configuration options available). You should also add the ReverseProxy middleware to your &lt;code&gt;app.psgi&lt;/code&gt; file (to ensure that your application sees the correct values for the &lt;code&gt;host&lt;/code&gt;). For the reverse proxy itself, something like &lt;a href=&#34;http://www.nginx.org/&#34;&gt;nginx&lt;/a&gt; works well, using a configuration like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  server {
      listen 80;
      server_name myapp.example.com;

      location / {
          proxy_set_header Host               $http_host;
          proxy_set_header X-Forwarded-Host   $http_host;
          proxy_set_header X-Real-IP          $remote_addr;
          proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Port   80;

          proxy_pass http://localhost:5000/;
      }
  }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should adjust the port in the proxy_pass statement to point to the port that you have Starman running on.&lt;/p&gt;

&lt;h2 id=&#34;Further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;If you need to deploy via other application servers or proxies, the Plack documentation covers a great deal of this. All of the server-specific documentation is covered in the &lt;a href=&#34;https://metacpan.org/module/Plack::Handler&#34;&gt;Plack::Handler&lt;/a&gt; classes (like &lt;a href=&#34;https://metacpan.org/module/Plack::Handler::FCGI&#34;&gt;Plack::Handler::FCGI&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/Plack::Handler::Apache2&#34;&gt;Plack::Handler::Apache2&lt;/a&gt;, etc). In addition, the &lt;a href=&#34;http://advent.plackperl.org/&#34;&gt;Plack advent calendar&lt;/a&gt; contains a lot of useful tips and tricks.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-11T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Exceptions</title><link href="http://ox.iinteractive.com/advent/2012-12-10.html"/><id>http://ox.iinteractive.com/advent/2012-12-10.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Exception-handling&#34;&gt;Exception handling&lt;/h2&gt;

&lt;p&gt;OX applications are implicitly wrapped in the &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::HTTPExceptions&#34;&gt;Plack::Middleware::HTTPExceptions&lt;/a&gt; middleware. This allows you to throw exception objects which implement various methods describing an HTTP error or redirect response, and have that exception object translated into a real PSGI response.&lt;/p&gt;

&lt;p&gt;Your exception objects can either implement the &lt;code&gt;as_psgi&lt;/code&gt; method (which will return a PSGI response to be used directly), or they can implement a &lt;code&gt;code&lt;/code&gt; method (and optionally &lt;code&gt;as_string&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt;), and a response will be built from calling those methods. Two common CPAN modules which implement a compatible interface are &lt;a href=&#34;https://metacpan.org/module/HTTP::Exception&#34;&gt;HTTP::Exception&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/module/HTTP::Throwable&#34;&gt;HTTP::Throwable&lt;/a&gt;. Since HTTP::Throwable is more flexible and extensible (being built via a set of reusable Moose roles), it is generally recommended for this purpose.&lt;/p&gt;

&lt;h2 id=&#34;HTTP::Throwable&#34;&gt;HTTP::Throwable&lt;/h2&gt;

&lt;p&gt;HTTP::Throwable implements a set of exception classes for HTTP redirect and error codes (3xx, 4xx, 5xx). HTTP::Throwable itself is a role which provides functionality common to all of the classes, but you typically interact with it via &lt;a href=&#34;https://metacpan.org/module/HTTP::Throwable::Factory&#34;&gt;HTTP::Throwable::Factory&lt;/a&gt;, which provides shortcuts for creating and throwing HTTP::Throwable objects. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;HTTP::Throwable::Factory &lt;span class=&#34;synConstant&#34;&gt;&#39;http_throw&#39;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;index &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$r&lt;/span&gt;) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;http_throw(&lt;span class=&#34;synConstant&#34;&gt;MethodNotAllowed&lt;/span&gt; =&#38;gt; { &lt;span class=&#34;synConstant&#34;&gt;allow&lt;/span&gt; =&#38;gt; [ &lt;span class=&#34;synConstant&#34;&gt;qw(GET)&lt;/span&gt; ] })&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;method&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;GET&#39;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;http_throw(&lt;span class=&#34;synConstant&#34;&gt;Found&lt;/span&gt; =&#38;gt; { &lt;span class=&#34;synConstant&#34;&gt;location&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;uri_for&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;login&#39;&lt;/span&gt;) })&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;session-&#38;gt;{&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synComment&#34;&gt;# ...&lt;/span&gt;&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;http_throw takes the name of an exception type and an optional hashref of parameters for the exception class&#38;#39;s constructor. The exception class used will consume the role &lt;code&gt;HTTP::Throwable::Role::Status::$type&lt;/code&gt;, so you can find the documentation for specific HTTP statuses in the documentation for the individual status roles. If you just want to create the exception object to throw later, you can use the &lt;code&gt;http_exception&lt;/code&gt; function instead, which works identically except that the exception object is returned instead of thrown.&lt;/p&gt;

&lt;h2 id=&#34;Caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;While using exceptions in this way can save a lot of code (you don&#38;#39;t have to worry about missing an input failing to pass validation, for instance), there are also a few things to keep in mind.&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;Exceptions for exceptional conditions&lt;/p&gt;

&lt;p&gt;Plack::Middleware::HTTPExceptions and HTTP::Throwable only support 3xx, 4xx, and 5xx HTTP status codes. This is intentional, because using exceptions as a generic flow control mechanism is bad practice, and tends to make your code more difficult to follow. Exceptions should be used for exceptional conditions, such as validation or authorization failures. Real responses to requests in your application should use a normal code flow.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Middleware&lt;/p&gt;

&lt;p&gt;OX&#38;#39;s automatic use of Plack::Middleware::Exceptions happens at the innermost layer, which means that exceptions thrown from middleware will not be handled. This is because skipping over middleware stack frames via exceptions can lead to very confusing bugs. Middleware are typically written to expect to be able to run code after a request returns, and exceptions defeat this.&lt;/p&gt;

&lt;p&gt;For instance, take the example of &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Session&#34;&gt;Plack::Middleware::Session&lt;/a&gt;. It needs to be able to save the session data back to the session store when the request ends so that it will be there for next time. If you modify the session data but then end the request via &lt;code&gt;http_throw&lt;/code&gt;, that exception needs to be caught before the exception unwinds the Plack::Middleware::Session stack frame, or else the modified session data will not be saved.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-10T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>uri_for</title><link href="http://ox.iinteractive.com/advent/2012-12-09.html"/><id>http://ox.iinteractive.com/advent/2012-12-09.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Paths-and-actions&#34;&gt;Paths and actions&lt;/h2&gt;

&lt;p&gt;Different pages of your application need to be able to reference each other, and doing this by hardcoding URL paths is fairly fragile. URLs are the external API to your application, and may need to change for all kinds of different reasons, including things like SEO and general aesthetics which are frequently dictated by the client. Tying any part of your application&#38;#39;s functionality to URL paths themselves is a good way to make the application hard to modify as time goes on.&lt;/p&gt;

&lt;p&gt;What we need is a way to refer to application endpoints using an internal identifier instead of an external one (the old adage &#38;quot;All problems in computer science can be solved by another level of indirection&#38;quot; comes to mind). That way, we can change our external URLs without having to modify much, if any, application code. Luckily, we already have one. Yesterday we saw how you could access the mapping for the current route via &lt;code&gt;$r-&#38;gt;mapping&lt;/code&gt;. The inverse operation of &lt;code&gt;$r-&#38;gt;mapping&lt;/code&gt; is &lt;code&gt;$r-&#38;gt;uri_for&lt;/code&gt;. &lt;code&gt;uri_for&lt;/code&gt; takes a mapping hashref and returns the URI path corresponding to that mapping.&lt;/p&gt;

&lt;p&gt;For instance, given these routes:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;               =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;br /&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/:id&#39;&lt;/span&gt;       =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.view&#39;&lt;/span&gt;;&lt;br /&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/admin/view/:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.view&#39;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;section&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;admin&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;we get this:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synComment&#34;&gt;# &#38;quot;/&#38;quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;uri_for&lt;/span&gt;({&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;action&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;index&#39;&lt;/span&gt;,&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synComment&#34;&gt;# &#38;quot;/view/123&#38;quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;uri_for&lt;/span&gt;({&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;action&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;index&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;id&lt;/span&gt;         =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;123&lt;/span&gt;,&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synComment&#34;&gt;# &#38;quot;/admin/view/123&#38;quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;uri_for&lt;/span&gt;({&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;action&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;index&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;id&lt;/span&gt;         =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;123&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;section&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;admin&#39;&lt;/span&gt;,&lt;br /&gt;});&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Additionally, you only have to specify enough of the mapping to make it unique. For instance, if the three routes listed above were the only routes in the application, &lt;code&gt;$r-&#38;gt;uri_for({ section =&#38;gt; &#38;#39;admin&#38;#39;, id =&#38;gt; 123 })&lt;/code&gt; would also be sufficient for OX to figure out that you want &lt;code&gt;&#38;quot;/admin/view/123&#38;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;The-name-entry&#34;&gt;The &lt;code&gt;name&lt;/code&gt; entry&lt;/h3&gt;

&lt;p&gt;This can still be a bit verbose though, so there is a shorthand to make the common case easier. If you pass in just a single string to &lt;code&gt;uri_for&lt;/code&gt;, it will be treated as though you passed a mapping with that string as the &lt;code&gt;name&lt;/code&gt; value. This allows you to give the various routes in your application unique (and meaningful) names, and access them easily. If you say:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;br /&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/about&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.about&#39;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;name&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;about&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;then you can use &lt;code&gt;$r-&#38;gt;uri_for(&#38;#39;about&#38;#39;)&lt;/code&gt; to access the &lt;code&gt;&#38;quot;/about&#38;quot;&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;In addition, the ControllerAction and HTTPMethod route builders also by default set the &lt;code&gt;name&lt;/code&gt; value to be the action spec. This means that in the previous example, &lt;code&gt;$r-&#38;gt;uri_for(&#38;#39;root.index&#38;#39;)&lt;/code&gt; can also be used to access the &lt;code&gt;&#38;quot;/&#38;quot;&lt;/code&gt; path.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-09T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>OX::Request and OX::Response</title><link href="http://ox.iinteractive.com/advent/2012-12-08.html"/><id>http://ox.iinteractive.com/advent/2012-12-08.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;OX::Request&#34;&gt;OX::Request&lt;/h2&gt;

&lt;p&gt;As mentioned previously, action subroutines and methods receive an &lt;a href=&#34;https://metacpan.org/module/OX::Request&#34;&gt;OX::Request&lt;/a&gt; instance containing the request data as their first argument. OX::Request provides access to all of the request data that the application received for the current request. Everything from the PSGI environment is available in a nicely packaged object, as well as details of how OX matched the request against your router. There are even shortcuts to build OX::Response objects for your convenience.&lt;/p&gt;

&lt;h3 id=&#34;Basic-request-data&#34;&gt;Basic request data&lt;/h3&gt;

&lt;p&gt;The OX::Request instance provides methods to access all of the various parts of the request. Some commonly used methods include:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$r-&#38;gt;path&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Returns the request path.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$r-&#38;gt;method&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Returns the HTTP method (GET, POST, etc) that was used for the request.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$r-&#38;gt;headers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Returns an &lt;a href=&#34;https://metacpan.org/module/HTTP::Headers&#34;&gt;HTTP::Headers&lt;/a&gt; object containing the headers in the request.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$r-&#38;gt;param($name)&lt;/code&gt;, &lt;code&gt;$r-&#38;gt;parameters&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Allows access to the request parameters, either from the the query string or from the request body. The &lt;code&gt;param&lt;/code&gt; method returns the value for a single parameter, while the &lt;code&gt;parameters&lt;/code&gt; method returns a hashref of all parameters given.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$r-&#38;gt;uploads&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Returns a hashref of upload objects, which can be used to access uploaded files.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OX::Request is a subclass of &lt;a href=&#34;https://metacpan.org/module/Web::Request&#34;&gt;Web::Request&lt;/a&gt;, so you can find more details in its documentation.&lt;/p&gt;

&lt;h3 id=&#34;Encoding&#34;&gt;Encoding&lt;/h3&gt;

&lt;p&gt;By default, OX decodes all request data as UTF-8 before passing it to the application, and encodes all response data as UTF-8 before sending it back to the server. This is almost certainly what you should be doing in any new applications - UTF-8 is used by over half of all websites. If you need to handle different encodings, however, you can adjust the request object to handle things however you want. The &lt;code&gt;encoding&lt;/code&gt; method will allow you to set any encoding supported by &lt;a href=&#34;https://metacpan.org/module/Encode&#34;&gt;Encode&lt;/a&gt;, or &lt;code&gt;undef&lt;/code&gt; to do no encoding at all. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;index &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$r&lt;/span&gt;) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;encoding&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;latin1&#39;&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$page&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;param&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;page&#39;&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synComment&#34;&gt;# ...&lt;/span&gt;&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will set &lt;code&gt;$page&lt;/code&gt; to the value of the &lt;code&gt;page&lt;/code&gt; parameter, assuming that the request encoded the &lt;code&gt;page&lt;/code&gt; parameter using the latin1 encoding.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;encoding&lt;/code&gt; value is also used to encode the response. By default, all responses will be encoded as UTF-8, but if you need to return something like a binary file, you can do this:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;index &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$r&lt;/span&gt;) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synComment&#34;&gt;# ...&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;encoding&lt;/span&gt;(&lt;span class=&#34;synStatement&#34;&gt;undef&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; [&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;200&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;[ &lt;span class=&#34;synConstant&#34;&gt;&#39;Content-Type&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;application/pdf&#39;&lt;/span&gt; ],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;[ &lt;span class=&#34;synIdentifier&#34;&gt;$pdf_contents&lt;/span&gt; ],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;];&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This ensures that the binary data in the file will not be corrupted by trying to encode it as UTF-8 before returning it.&lt;/p&gt;

&lt;h3 id=&#34;Routing-details&#34;&gt;Routing details&lt;/h3&gt;

&lt;p&gt;You can also access the route description for the matched route via the &lt;code&gt;$r-&#38;gt;mapping&lt;/code&gt; method. This will return a hashref containing all of the path variables. In addition, this hashref may contain additional data, either added by the route builder or specified in the route description itself. For instance, the ControllerAction route builder adds keys for &lt;code&gt;controller&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt;, and the HTTPMethod route builder adds a &lt;code&gt;controller&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;You can specify additional elements to add to the mapping hashref in your route descriptions by specifying them in the hash along with your variable validations - values specified in this way are called &lt;i&gt;defaults&lt;/i&gt;. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/news.xml&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;feeds.news&#39;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;formatter&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Data::Feed::RSS&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/news.atom&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;feeds.news&#39;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;formatter&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Data::Feed::Atom&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In this case, the mapping hashref will contain a key for &lt;code&gt;formatter&lt;/code&gt; which contains the name of the formatter class to use. The &lt;code&gt;news&lt;/code&gt; action can then use this value to determine how to format the response, rather than having to guess by inspecting the request path.&lt;/p&gt;

&lt;h2 id=&#34;OX::Response&#34;&gt;OX::Response&lt;/h2&gt;

&lt;p&gt;If you need to return more complicated responses (with headers, cookies, and things like that), you can use &lt;a href=&#34;https://metacpan.org/module/OX::Response&#34;&gt;OX::Response&lt;/a&gt; (a subclass of &lt;a href=&#34;https://metacpan.org/module/Web::Response&#34;&gt;Web::Response&lt;/a&gt;) to make this process easier. You can create an OX::Response object by calling the &lt;code&gt;new_response&lt;/code&gt; method on the request object, and then setting the various values via methods on the response object. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;new_response&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;status&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;200&lt;/span&gt;);&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$is_internet_explorer&lt;/span&gt;) {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;content_type&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;application/vnd.ms-excel&#39;&lt;/span&gt;);&lt;br /&gt;}&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;else&lt;/span&gt; {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;content_type&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;text/csv&#39;&lt;/span&gt;);&lt;br /&gt;}&lt;br /&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;content&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;foo,bar&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;baz,quux&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;&lt;/span&gt;);&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;new_response&lt;/code&gt; can also take key/value pairs to populate initial values for &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, etc, or it can also take a valid (possibly partial) PSGI response to set some initial values:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;new_response&lt;/span&gt;([&lt;span class=&#34;synConstant&#34;&gt;200&lt;/span&gt;, [&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;X-My-App&#38;quot;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;MyApp&#38;quot;&lt;/span&gt;]]);&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$is_internet_explorer&lt;/span&gt;) {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;content_type&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;application/vnd.ms-excel&#39;&lt;/span&gt;);&lt;br /&gt;}&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;else&lt;/span&gt; {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;content_type&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;text/csv&#39;&lt;/span&gt;);&lt;br /&gt;}&lt;br /&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;content&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;foo,bar&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;baz,quux&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;&lt;/span&gt;);&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;See &lt;a href=&#34;https://metacpan.org/module/Web::Response&#34;&gt;Web::Response&lt;/a&gt; for more details about the full functionality available.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-08T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>PSGI</title><link href="http://ox.iinteractive.com/advent/2012-12-07.html"/><id>http://ox.iinteractive.com/advent/2012-12-07.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; is the Perl (web) Server Gateway Interface. It defines a protocol for Perl web applications to communicate with web servers in such a way that applications can just write code using the protocol and automatically work on any web server that supports PSGI (which is most of them, these days). It consists of two main parts: the request API and the response API. A PSGI application is just a subroutine which takes a request environment hashref as a parameter and returns a valid response.&lt;/p&gt;

&lt;p&gt;In OX, you create a PSGI application by calling the &lt;code&gt;to_app&lt;/code&gt; method on an application instance. This is also used as the return value of the &lt;code&gt;router&lt;/code&gt; block, to make writing short applications easier.&lt;/p&gt;

&lt;h2 id=&#34;Request&#34;&gt;Request&lt;/h2&gt;

&lt;p&gt;The request environment is a hashref containing all of the request data. You can access the actual request environment in OX via the &lt;code&gt;env&lt;/code&gt; method on an &lt;a href=&#34;https://metacpan.org/module/OX::Request&#34;&gt;OX::Request&lt;/a&gt; object. It is typically easier, however, to access the data via the methods on the request object (which we will discuss tomorrow). The raw environment hashref is available if you need to do more complicated things, or if OX::Request doesn&#38;#39;t expose the data that you need.&lt;/p&gt;

&lt;p&gt;One thing that is exposed in the environment that may be useful is information about the capabilities of the server you are currently running on. PSGI discourages relying on specific server implementations if at all possible - any functionality you may need from a server should be exposed in a general way, so that other servers can also implement it. Some examples are:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;psgi.multithread&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server runs multiple requests simultaneously in separate threads.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;psgi.multiprocess&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server runs multiple requests simultaneously in separate processes.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;psgi.run_once&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server only runs a single request in a given process (like CGI).&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;psgi.nonblocking&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server supports non-blocking operation via an event loop. You should make sure that your application uses a compatible event loop if you want to interact with it.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;psgi.streaming&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server supports streaming responses. These will be described in the next section.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;Response&#34;&gt;Response&lt;/h2&gt;

&lt;p&gt;Understanding how the response protocol works is much more useful, since, as mentioned previously, action subroutines in OX can return not only a string or a response object, but also any valid PSGI response. A PSGI response is either a three-element array reference, or (if &lt;code&gt;psgi.streaming&lt;/code&gt; is true) a code reference. The three elements of the array reference are, in order:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;The response code. This is a single integer between 100 and 599.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An arrayref containing the headers, in key-value pairs. It is an arrayref rather than a hashref because the HTTP specification allows certain headers to be specified multiple times. This must contain at least a &lt;code&gt;Content-Type&lt;/code&gt; entry, unless the response code is &lt;code&gt;1xx&lt;/code&gt;, &lt;code&gt;204&lt;/code&gt;, or &lt;code&gt;304&lt;/code&gt;.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The response body. This can either be an arrayref of strings or a filehandle of some sort.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, a simple response could look like this:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;[ &lt;span class=&#34;synConstant&#34;&gt;200&lt;/span&gt;, [ &lt;span class=&#34;synConstant&#34;&gt;&#39;Content-Type&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;text/plain&#39;&lt;/span&gt; ], [ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; ] ]&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In addition, if the &lt;code&gt;psgi.streaming&lt;/code&gt; variable is true in the environment, the response can be a coderef. This coderef will receive a callback subroutine as its only argument. You can use this callback in one of two ways.&lt;/p&gt;

&lt;p&gt;The simplest way to use it is to just call the callback with a full response arrayref as described above. This can be useful if you are running on a nonblocking server, and want to not block the server while you wait for response data to be fetched.&lt;/p&gt;

&lt;p&gt;For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$responder&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$data&lt;/span&gt; = slow_database_query();&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$responder&lt;/span&gt;-&#38;gt;([&lt;span class=&#34;synConstant&#34;&gt;200&lt;/span&gt;, [&lt;span class=&#34;synConstant&#34;&gt;&#39;Content-Type&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;text/html&#39;&lt;/span&gt;], [render(&lt;span class=&#34;synIdentifier&#34;&gt;$data&lt;/span&gt;)]]);&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In addition, this form of response can be used for HTTP server push (also known as long-poll or Comet) applications. In these kinds of requests, the connection remains open, and the server streams data to the client, which reads it as it comes in. To support this, you can pass the callback an arrayref containing only the first two elements (response code and headers). The callback will then return an object which implements two methods, &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;, which can be used to send data to the client directly.&lt;/p&gt;

&lt;p&gt;An example of this type of response:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$responder&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$writer&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$responder&lt;/span&gt;-&#38;gt;([&lt;span class=&#34;synConstant&#34;&gt;200&lt;/span&gt;, [&lt;span class=&#34;synConstant&#34;&gt;&#39;Content-Type&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;application/json&#39;&lt;/span&gt;]]);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$event&lt;/span&gt; = get_next_event()) {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$writer-&#38;gt;write&lt;/span&gt;(encode_json(&lt;span class=&#34;synIdentifier&#34;&gt;$event&lt;/span&gt;) . &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;}&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$writer-&#38;gt;close&lt;/span&gt;;&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h3 id=&#34;response_cb&#34;&gt;&lt;code&gt;response_cb&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Middleware can be applied to any PSGI application, and if they need to modify the response, dealing with all of these different kinds of responses can be difficult. Plack provides &lt;code&gt;Plack::Util::response_cb&lt;/code&gt; to handle this situation more conveniently. It takes a PSGI response and a coderef, and returns an updated PSGI response after having been filtered through the coderef. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt; = Plack::Util::response_cb(&lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt;, &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@{&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;[&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;, (&lt;span class=&#34;synConstant&#34;&gt;&#39;X-Foo&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Bar&#39;&lt;/span&gt;);&lt;br /&gt;});&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In this case, the response is updated in-place and returned (and the return value from the subroutine is ignored).&lt;/p&gt;

&lt;p&gt;Alternatively, you can return a code reference from the subroutine, and it will be used as a content filter. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt; = Plack::Util::response_cb(&lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt;, &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$chunk&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$chunk&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;uc&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$chunk&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;};&lt;br /&gt;});&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;/div&gt;</summary><updated>2012-12-07T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Mounts</title><link href="http://ox.iinteractive.com/advent/2012-12-06.html"/><id>http://ox.iinteractive.com/advent/2012-12-06.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;The-mount-keyword&#34;&gt;The &lt;code&gt;mount&lt;/code&gt; keyword&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;mount&lt;/code&gt; keyword allows you to include other &lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; applications inside your application, under a given request path. For instance, if you have static files that need to be served, you can create a &lt;a href=&#34;https://metacpan.org/module/Plack::App::File&#34;&gt;Plack::App::File&lt;/a&gt; instance and mount it under &lt;code&gt;/static&lt;/code&gt;, so that any request for a path underneath &lt;code&gt;/static&lt;/code&gt; will be delegated to the Plack::App::File app.&lt;/p&gt;

&lt;p&gt;You can specify an app in one of four ways:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;A PSGI coderef&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;mount &lt;span class=&#34;synConstant&#34;&gt;&#39;/static&#39;&lt;/span&gt; =&#38;gt; Plack::App::File-&#38;gt;new(&lt;span class=&#34;synConstant&#34;&gt;root&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;static&#38;quot;&lt;/span&gt;)-&#38;gt;to_app;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In this case, the coderef is delegated to directly.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An object&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;mount &lt;span class=&#34;synConstant&#34;&gt;&#39;/static&#39;&lt;/span&gt; =&#38;gt; Plack::App::File-&#38;gt;new(&lt;span class=&#34;synConstant&#34;&gt;root&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;static&#38;quot;&lt;/span&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The object will have &lt;code&gt;to_app&lt;/code&gt; called on it, and the result of that will be used for the mount.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of a class&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;mount &lt;span class=&#34;synConstant&#34;&gt;&#39;/static&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Plack::App::File&#38;quot;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;root&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;static_root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;encoding&lt;/span&gt; =&#38;gt; literal(&lt;span class=&#34;synConstant&#34;&gt;&#39;latin1&#39;&lt;/span&gt;),&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will first instantiate a new instance of the class, and then use that instance as described in the previous bullet point. The instance will be instantiated via Bread::Board, so it can depend on services that your application has declared. The dependencies should be listed as a hash after the name of the class.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another router&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;mount &lt;span class=&#34;synConstant&#34;&gt;&#39;/auth&#39;&lt;/span&gt; =&#38;gt; router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/login&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;auth.login&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synComment&#34;&gt;# ...&lt;/span&gt;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will allow you to create separate sections of your application under certain request paths. These will be able to define all of their own middleware, routes, and mounts, but will share the attributes defined in the main app. In this example, a request for &lt;code&gt;/auth/login&lt;/code&gt; will be handled by the &lt;code&gt;auth.login&lt;/code&gt; action.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-06T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Middleware</title><link href="http://ox.iinteractive.com/advent/2012-12-05.html"/><id>http://ox.iinteractive.com/advent/2012-12-05.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Plack-Middleware&#34;&gt;Plack Middleware&lt;/h2&gt;

&lt;p&gt;Middleware are a concept from &lt;a href=&#34;https://metacpan.org/module/Plack&#34;&gt;Plack&lt;/a&gt; which allow you to intercept requests before they are seen by your application, and manipulate responses before they are sent back to the server. This can be used to add many different kinds of behavior to your application - for instance, redirecting users to a login page if they attempt to access the site without being logged in.&lt;/p&gt;

&lt;p&gt;At the most basic level, middleware are just subroutines which take a PSGI application as an argument, and return a new PSGI application. In this way, you can modify the PSGI environment before calling the underlying application, fiddle with the response that the application returns before sending it back to the server, or even do something else entirely.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Plack::Middleware&#34;&gt;Plack::Middleware&lt;/a&gt; is a class you can inherit from which helps in writing middleware. It allows you to write the middleware the same way that you would write a PSGI application, which will typically be more natural. Plack also comes with a wide variety of different pre-written middleware, which you can use in your application directly.&lt;/p&gt;

&lt;h2 id=&#34;The-wrap-keyword&#34;&gt;The &lt;code&gt;wrap&lt;/code&gt; keyword&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;wrap&lt;/code&gt; keyword is how you add middleware to your OX application. &lt;code&gt;wrap&lt;/code&gt; must be called inside a &lt;code&gt;router&lt;/code&gt; block, and is quite similar to the &lt;code&gt;enable&lt;/code&gt; keyword in &lt;a href=&#34;https://metacpan.org/module/Plack::Builder&#34;&gt;Plack::Builder&lt;/a&gt;. Middleware can be specified in one of three ways:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;A coderef&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;wrap &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$app&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$env&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$app&lt;/span&gt;-&#38;gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$env&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@{&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res-&#38;gt;[&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#39;X-Powered-By&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;OX &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt;OX::&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$res&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;};&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will call the given subroutine with the application as the first argument, and use the return value as the new application.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An instance of a Plack::Middleware subclass&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$mw&lt;/span&gt; = Plack::Middleware::AccessLog-&#38;gt;new(&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;format&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;combined&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;wrap &lt;span class=&#34;synIdentifier&#34;&gt;$mw&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will call the &lt;code&gt;wrap&lt;/code&gt; method on the object, and use the return value as the new application.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of a Plack::Middleware subclass&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;wrap &lt;span class=&#34;synConstant&#34;&gt;&#39;Plack::Middleware::Static&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;root&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;static_root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;path&lt;/span&gt; =&#38;gt; literal(&lt;span class=&#34;synConstant&#34;&gt;qr{^/&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;(?:&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;images|js|css&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;/}&lt;/span&gt;),&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will first instantiate a new instance of the middleware class, and then use that instance as described in the previous bullet point. The instance will be instantiated via &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt;, so it can depend on services that your application has declared. The dependencies should be listed as a hash after the name of the class.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The middleware will be applied in such an order that the first &lt;code&gt;wrap&lt;/code&gt; statement corresponds to the outermost middleware.&lt;/p&gt;

&lt;h3 id=&#34;wrap_if&#34;&gt;&lt;code&gt;wrap_if&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Sometimes you don&#38;#39;t want the middleware to be in effect for every request. For instance, you may have a middleware which redirects unregistered users to a login page, but this wouldn&#38;#39;t work if this middleware was in effect for requests for the login page itself!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wrap_if&lt;/code&gt; allows you to conditionally apply middleware. It takes a coderef as an additional initial parameter, and the middleware will only be applied if that coderef returns a true value. It is similar to the &lt;code&gt;enable_if&lt;/code&gt; keyword in &lt;a href=&#34;https://metacpan.org/module/Plack::Builder&#34;&gt;Plack::Builder&lt;/a&gt;. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;wrap_if &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synIdentifier&#34;&gt;$_[&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;]-&#38;gt;{&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;REMOTE_ADDR&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;127.0.0.1&#39;&lt;/span&gt; },&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#39;Plack::Middleware::StackTrace&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;force&lt;/span&gt; =&#38;gt; literal(&lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;),&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The condition subroutine will be called with the PSGI environment as the first argument, and should return true if the middleware should be applied. This example will only apply the &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::StackTrace&#34;&gt;StackTrace&lt;/a&gt; middleware if the request is coming from localhost.&lt;/p&gt;

&lt;h2 id=&#34;Example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Here is a more complete example of using &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;wrap_if&lt;/code&gt;. This application enables the &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::StackTrace&#34;&gt;StackTrace&lt;/a&gt; middleware for requests coming from localhost (to make debugging easier), and serves static files from the application via the &lt;a href=&#34;https://metacpan.org/module/Plack::Middleware::Static&#34;&gt;Static&lt;/a&gt; middleware.&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;static_root&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root/static/&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;profile&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;  =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller::Profile&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;wrap_if &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synIdentifier&#34;&gt;$_[&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;]-&#38;gt;{&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;REMOTE_ADDR&lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;127.0.0.1&#39;&lt;/span&gt; },&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#39;Plack::Middleware::StackTrace&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;force&lt;/span&gt; =&#38;gt; literal(&lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;),&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;wrap &lt;span class=&#34;synConstant&#34;&gt;&#39;Plack::Middleware::Static&#39;&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;root&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;static_root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;path&lt;/span&gt; =&#38;gt; literal(&lt;span class=&#34;synConstant&#34;&gt;qr{^/&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;(?:&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;images|js|css&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;/}&lt;/span&gt;),&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/profile&#39;&lt;/span&gt;       =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;profile.self&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/profile/:user&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;profile.view&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;/div&gt;</summary><updated>2012-12-05T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Bread::Board</title><link href="http://ox.iinteractive.com/advent/2012-12-04.html"/><id>http://ox.iinteractive.com/advent/2012-12-04.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Dependency-Injection&#34;&gt;Dependency Injection&lt;/h2&gt;

&lt;p&gt;One thing that you may have noticed in the article about actions is that actions only receive the request object. There is no global application context, or stash, or anything like that, like you may be used to in other frameworks. This is by design - global state in general is bad for maintainability.&lt;/p&gt;

&lt;p&gt;This does present a problem, however - how do you access things like your model objects, if action methods aren&#38;#39;t passed anything which can access them? The answer is pretty straightforward: if your controller is going to use a model object, that object should be an attribute. This limits the scope of your helper objects to only the places you expect them to actually be used (which helps in debugging, and reliability in general), without making them any more difficult to access.&lt;/p&gt;

&lt;p&gt;The mechanism which powers this is called &lt;i&gt;dependency injection&lt;/i&gt;. Dependency injection is a pattern in which you specify the relationships between your objects (which objects are necessary for each objects&#38;#39; construction), and a framework determines how to create the objects on demand such that all of the dependencies are met. The framework that OX uses is called &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt;, via the &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Declare&#34;&gt;Bread::Board::Declare&lt;/a&gt; sugar layer.&lt;/p&gt;

&lt;h2 id=&#34;Defining-services&#34;&gt;Defining services&lt;/h2&gt;

&lt;p&gt;Describing your application is done by creating &lt;i&gt;services&lt;/i&gt; for each type of object your application will need. In OX (because OX uses Bread::Board::Declare), this is as simple as creating attributes on your application class, just like you would in any other project. The difference is that in the attribute definition, you must define how the value for that attribute should be created, and which other attributes the creation process needs. Here is an example of an OX class with a few attribute defintions:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; MyApp&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;dsn&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dbi:mysql:myapp&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;block&lt;/span&gt;        =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$s&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; MyApp::Model-&#38;gt;&lt;span class=&#34;synStatement&#34;&gt;connect&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$s-&#38;gt;param&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;));&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synComment&#34;&gt;# ...&lt;/span&gt;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This is very similar to the way you would write the class normally, except that you use the &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;block&lt;/code&gt; options instead of &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;builder&lt;/code&gt;, and if your attribute holds an object with a constructor that takes key/value pairs (like Moose objects do by default), you don&#38;#39;t have to specify anything at all (Bread::Board will figure out how to create the object on its own).&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;dsn&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Str&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;value&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dbi:mysql:myapp&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If the attribute specifies &lt;code&gt;value&lt;/code&gt;, then requesting the service will return that given value directly. Here, requesting the &lt;code&gt;dsn&lt;/code&gt; service will return the string &lt;code&gt;&#38;quot;dbi:mysql:myapp&#38;quot;&lt;/code&gt; unless another value has been provided for this attribute, such as from a constructor parameter.&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;block&lt;/span&gt;        =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$s&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; MyApp::Model-&#38;gt;&lt;span class=&#34;synStatement&#34;&gt;connect&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$s-&#38;gt;param&lt;/span&gt;(&lt;span class=&#34;synConstant&#34;&gt;&#39;dsn&#39;&lt;/span&gt;));&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you specify &lt;code&gt;block&lt;/code&gt;, Bread::Board will first initialize all of the dependencies. Then, it will call the subroutine provided in &lt;code&gt;block&lt;/code&gt;. That subroutine receives one argument, an object which contains the value of each dependency. The dependency values can be accessed via the &lt;code&gt;param&lt;/code&gt; method on that object. Here, requesting the &lt;code&gt;model&lt;/code&gt; service will first get the value from the &lt;code&gt;dsn&lt;/code&gt; service, and then call the given sub. Calling &lt;code&gt;$s-&#38;gt;param(&#38;#39;dsn&#38;#39;)&lt;/code&gt; inside that sub will return the value for the &lt;code&gt;dsn&lt;/code&gt; service.&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;MyApp::Controller&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;model&#39;&lt;/span&gt;],&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you specify neither of those, but the type constraint corresponds to a class, Bread::Board will get the value associated with each dependency listed and pass them as parameters to the constructor. For instance, here the value for the service will be created by calling &lt;code&gt;MyApp::Controller-&#38;gt;new(model =&#38;gt; $model)&lt;/code&gt; (where &lt;code&gt;$model&lt;/code&gt; is the value retrieved from the &lt;code&gt;model&lt;/code&gt; service).&lt;/p&gt;

&lt;h2 id=&#34;Dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;&lt;i&gt;Dependencies&lt;/i&gt; are how services know which other services are required in order to generate their value. The simplest way to specify dependencies is with an arrayref of service names (as above). If you need to use a different name for a service, however, you&#38;#39;ll need to specify the dependencies via a hashref:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;view&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Template&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;INCLUDE_PATH&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;template_root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will create a &lt;a href=&#34;https://metacpan.org/module/Template&#34;&gt;Template&lt;/a&gt; object by calling &lt;code&gt;Template-&#38;gt;new(INCLUDE_PATH =&#38;gt; $template_root)&lt;/code&gt;, where &lt;code&gt;$template_root&lt;/code&gt; is created from the &lt;code&gt;template_root&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Sometimes you don&#38;#39;t necessarily want to create trivial services for constant values. If you want to create a service with an inline, hardcoded value for one of its constructor parameters, you can use the &lt;code&gt;literal&lt;/code&gt; helper keyword:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;has &lt;span class=&#34;synConstant&#34;&gt;view&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Template&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dependencies&lt;/span&gt; =&#38;gt; {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;INCLUDE_PATH&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;template_root&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;TAG_STYLE&lt;/span&gt;    =&#38;gt; literal(&lt;span class=&#34;synConstant&#34;&gt;&#39;php&#39;&lt;/span&gt;),&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will do the same thing as above, except that it will call &lt;code&gt;Template-&#38;gt;new(INCLUDE_PATH =&#38;gt; $template_root, TAG_STYLE =&#38;gt; &#38;#39;php&#38;#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;Resolving-services&#34;&gt;Resolving services&lt;/h2&gt;

&lt;p&gt;Requesting the value from a service is called &lt;i&gt;resolving&lt;/i&gt; the service. Recall from the article on route builders that there are many ways to specify which code executes when a route matches. For instance, you can specify an action like &lt;code&gt;&#38;quot;profile.edit&#38;quot;&lt;/code&gt;. To dispatch this action, OX first resolves the &lt;code&gt;profile&lt;/code&gt; service, which by convention we also call the &lt;code&gt;profile&lt;/code&gt; &lt;i&gt;controller&lt;/i&gt; since it is a kind of dispatch target. OX then calls the &lt;code&gt;edit&lt;/code&gt; method (called the &lt;code&gt;edit&lt;/code&gt; &lt;i&gt;action&lt;/i&gt;) on the &lt;code&gt;profile&lt;/code&gt; controller. Thanks to Bread::Board, your &lt;code&gt;profile&lt;/code&gt; controller will be fully initialized with all of its specified dependencies, so that OX can satisfy the user&#38;#39;s web request.&lt;/p&gt;

&lt;p&gt;If you want to get the values out of your application class separately, you can just call the accessor for the attribute. If the attribute doesn&#38;#39;t have a value stored in it, this will create a new instance of the value held by the service and return it (otherwise, it will work like a normal attribute). Other ways to interact with services will be described in a future article.&lt;/p&gt;

&lt;h2 id=&#34;Further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;This article has been just a very high level overview of how to create OX applications that use additional classes. We will be going deeper into detail about how to use Bread::Board features more effectively with OX in future articles, but if you&#38;#39;re interested in learning more about it, the documentation for &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt; (especially the &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Manual&#34;&gt;Bread::Board::Manual&lt;/a&gt;) and &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Declare&#34;&gt;Bread::Board::Declare&lt;/a&gt; are useful resources, as is &lt;a href=&#34;http://youtu.be/DhhaOQWoOpw&#34;&gt;this talk&lt;/a&gt; from YAPC::NA 2012.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-04T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Routes and Path::Router</title><link href="http://ox.iinteractive.com/advent/2012-12-03.html"/><id>http://ox.iinteractive.com/advent/2012-12-03.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Routing&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;Routing is the step that takes an HTTP request and decides what code should actually be run. Although any part of the request can be used here, in practice routing happens by only looking at the path (and maybe the HTTP method).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Path::Router&#34;&gt;Path::Router&lt;/a&gt; is a module which can take an incoming path and return which of a set of route definitions it matched. OX uses this as the basis for its routing. Path::Router handles solely the path aspect of routing - routing based on other things (such as HTTP methods) must be handled via route builders.&lt;/p&gt;

&lt;h3 id=&#34;Basic-routes&#34;&gt;Basic routes&lt;/h3&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;           =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/archive&#39;&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.archive&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/auth/login&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;auth.login&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The simplest pattern for matching paths consists of just a literal string, to be matched against the incoming path. This only looks at the path itself (to be specific, the &lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; &lt;code&gt;PATH_INFO&lt;/code&gt; variable), so any query parameters are ignored. If the path in the incoming request is equal to any of the paths defined in the router, that path is chosen, and its associated code is run to create the response. If no path matches, a 404 response is returned.&lt;/p&gt;

&lt;h3 id=&#34;Route-variables&#34;&gt;Route variables&lt;/h3&gt;

&lt;p&gt;Some routes need to contain variable components. These can be specified by a leading colon:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$r&lt;/span&gt;, &lt;span class=&#34;synIdentifier&#34;&gt;$id&lt;/span&gt;) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;; &lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$id&lt;/span&gt; };&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In this case, this route doesn&#38;#39;t match just the path &lt;code&gt;/view/:id&lt;/code&gt;, but any path that starts with &lt;code&gt;/view/&lt;/code&gt; and contains exactly one additional path component: &lt;code&gt;/view/24&lt;/code&gt;, &lt;code&gt;/view/c9625979-976a-4cf1-b557-7cf5bd591d0d&lt;/code&gt;, etc. When the code for the route is called, the variable path components will be passed as additional arguments, in order, after the request object.&lt;/p&gt;

&lt;p&gt;Variable routes do make routing more complicated, however, since paths can now potentially match multiple different routes. If a path is given which does match multiple routes, the route with the fewest variable path components is chosen. For instance, given this router:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/:id&#39;&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view_specific_post&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/default&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view_default_post&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;a request for &lt;code&gt;/view/default&lt;/code&gt; will match the &lt;code&gt;view_default_post&lt;/code&gt; route. If there are multiple routes with the fewest variable path components, an error will be thrown (so don&#38;#39;t do that).&lt;/p&gt;

&lt;h4 id=&#34;Optional-routes&#34;&gt;Optional routes&lt;/h4&gt;

&lt;p&gt;Sometimes the path component isn&#38;#39;t actually necessary at all. In this case, you can prefix the path variable with a question mark to indicate that including it is not actually necessary (path components must otherwise be non-empty strings). For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/?:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view_specific_post&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In this case, &lt;code&gt;/view&lt;/code&gt; is also a valid path, and the argument passed to the route&#38;#39;s code will be &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;Validations&#34;&gt;Validations&lt;/h4&gt;

&lt;p&gt;Sometimes you want a bit more control than just &#38;quot;does the path component exist?&#38;quot;. In this case, you can specify constraints to validate the path variables. For instance:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view_by_id&#39;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;id&lt;/span&gt; =&#38;gt; { &lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Int&#39;&lt;/span&gt; },&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/view/:search&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.search&#39;&lt;/span&gt;, (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;search&lt;/span&gt; =&#38;gt; { &lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;qr/^&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;\D+&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;$/&lt;/span&gt; },&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;);&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will route &lt;code&gt;/view/123&lt;/code&gt; to &lt;code&gt;view_by_id&lt;/code&gt;, and &lt;code&gt;/view/foobar&lt;/code&gt; to &lt;code&gt;search&lt;/code&gt;. Validations must be specified by a hash following the action spec, where the keys are names of variable path components and the values are hashrefs with an &lt;code&gt;isa&lt;/code&gt; entry. Each validation can be either a Moose type constraint (a type name or a type constraint object) or a regular expression.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-03T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Route Builders and Actions</title><link href="http://ox.iinteractive.com/advent/2012-12-02.html"/><id>http://ox.iinteractive.com/advent/2012-12-02.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;The-route-keyword&#34;&gt;The &lt;code&gt;route&lt;/code&gt; keyword&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;route&lt;/code&gt; keyword maps a &lt;i&gt;path&lt;/i&gt; to an &lt;i&gt;action spec&lt;/i&gt;. A path is a pattern that resembles a URI path, which OX attempts to match against the incoming request URI. An action spec can take many forms, but it essentially describes what code will run when the corresponding path is matched. The path syntax and features will be described tomorrow, but today&#38;#39;s article is about how the action spec is interpreted.&lt;/p&gt;

&lt;h2 id=&#34;Route-builders&#34;&gt;Route builders&lt;/h2&gt;

&lt;p&gt;Route builders are the part of OX which takes an action spec and determines which code to run when its associated path is matched. For instance, in this router:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;          =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/posts/:id&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;posts.view&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;/&lt;/code&gt; uses a route builder which just calls the given coderef directly, while &lt;code&gt;/posts/24&lt;/code&gt; uses a route builder which generates a coderef to call the &lt;code&gt;view&lt;/code&gt; method on the &lt;code&gt;posts&lt;/code&gt; controller.&lt;/p&gt;

&lt;p&gt;There are three default route builders for OX applications:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/OX::RouteBuilder::Code&#34;&gt;OX::RouteBuilder::Code&lt;/a&gt;&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; };&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This route builder will be used whenever the action spec is a coderef. It is the most basic route builder - it just allows you to specify a coderef to call when the route is chosen.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/OX::RouteBuilder::ControllerAction&#34;&gt;OX::RouteBuilder::ControllerAction&lt;/a&gt;&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root.index&#39;&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The ControllerAction route builder will be used if the action spec consists of two words (&lt;code&gt;\w+&lt;/code&gt;) separated by a period. Those two words will be used to look up a controller to use and a method to call on that controller. The controller is looked up by name among the attributes on the OX application (really services, but we will discuss that when we explain Bread::Board).&lt;/p&gt;

&lt;p&gt;The code which is run for the above example is roughly equivalent to:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$controller&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;root&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$controller-&#38;gt;index&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;);&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/OX::RouteBuilder::HTTPMethod&#34;&gt;OX::RouteBuilder::HTTPMethod&lt;/a&gt;&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;root&#39;&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The HTTPMethod route builder will be used if the action spec consists of a single word (&lt;code&gt;\w+&lt;/code&gt;). This word will be used to look up a controller as in the ControllerAction route builder, but the method to call will be the lowercase version of the HTTP method used (&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, etc). If no appropriate method is found in the class, it will attempt to call the method named &lt;code&gt;any&lt;/code&gt; instead. If that is also not found, the request will return a 405 error.&lt;/p&gt;

&lt;p&gt;The code which is run for the above example is roughly equivalent to:&lt;/p&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; (&lt;span class=&#34;synIdentifier&#34;&gt;$r&lt;/span&gt;) = &lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$controller&lt;/span&gt; = &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;root&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$method&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;lc&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$r-&#38;gt;method&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;$method&lt;/span&gt; = &lt;span class=&#34;synConstant&#34;&gt;&#39;any&#39;&lt;/span&gt;             &lt;span class=&#34;synStatement&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;synIdentifier&#34;&gt;$controller-&#38;gt;can&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$method&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; [&lt;span class=&#34;synConstant&#34;&gt;405&lt;/span&gt;, [], [&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;error&#38;quot;&lt;/span&gt;]] &lt;span class=&#34;synStatement&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;synIdentifier&#34;&gt;$controller-&#38;gt;can&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;$method&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$controller-&#38;gt;$method&lt;/span&gt;(&lt;span class=&#34;synIdentifier&#34;&gt;@_&lt;/span&gt;);&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also define your own route builders, but doing so will be covered in another article.&lt;/p&gt;

&lt;h2 id=&#34;Actions&#34;&gt;Actions&lt;/h2&gt;

&lt;p&gt;Once OX determines which code to run to fulfill the request, it will call that code. The code that is called will receive an &lt;a href=&#34;https://metacpan.org/module/OX::Request&#34;&gt;OX::Request&lt;/a&gt; object as its first argument (other than the invocant, if called as a method), which can be used to access all of the request information. The action code should return the response to use, which can be any of:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;Any valid &lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; response&lt;/p&gt;

&lt;p&gt;This will be used as-is.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A string&lt;/p&gt;

&lt;p&gt;This will result in a response with a 200 response code and &lt;code&gt;Content-Type&lt;/code&gt; set to &lt;code&gt;text/html&lt;/code&gt;.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;https://metacpan.org/module/OX::Response&#34;&gt;OX::Response&lt;/a&gt; object&lt;/p&gt;

&lt;p&gt;This will use the result of calling the &lt;code&gt;finalize&lt;/code&gt; method. This will typically be generated by calling &lt;code&gt;new_response&lt;/code&gt; on the request object that you receive.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All requests will be decoded and all responses will be encoded as UTF-8 automatically, so your application can deal entirely with Unicode strings. This behavior can be changed if necessary, but we will discuss that in a future post.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-02T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry><entry><title>Introduction to OX</title><link href="http://ox.iinteractive.com/advent/2012-12-01.html"/><id>http://ox.iinteractive.com/advent/2012-12-01.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/OX&#34;&gt;OX&lt;/a&gt; is a new web framework, designed to allow you to easily glue together existing components (or write new, highly decoupled components) for your application, without requiring additional plugin systems, glue layers, or global state. It is available on &lt;a href=&#34;https://metacpan.org/module/OX&#34;&gt;CPAN&lt;/a&gt;, and on &lt;a href=&#34;http://github.com/iinteractive/OX&#34;&gt;GitHub&lt;/a&gt;. You can install it via &lt;code&gt;cpanm OX&lt;/code&gt;. If you have any questions or suggestions, we hang out on the &lt;code&gt;#ox&lt;/code&gt; channel on irc.perl.org, so feel free to drop by!&lt;/p&gt;

&lt;p&gt;OX is based on three main components:&lt;/p&gt;

&lt;h3 id=&#34;Plack&#34;&gt;Plack&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Plack&#34;&gt;Plack&lt;/a&gt; is an implementation of the &lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; protocol. By implementing PSGI, OX can run on any server platform that PSGI supports (which is most of them). Plack also provides extra functionality such as middleware, which OX exposes to application authors (as will be described in future articles).&lt;/p&gt;

&lt;h3 id=&#34;Bread::Board&#34;&gt;Bread::Board&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt; is a dependency injection framework, used to structure your application initialization. It allows your application objects to access each other without the need for globals or repetitive argument passing. With Bread::Board, you can write your application classes however makes sense to you, and then tie them all together.&lt;/p&gt;

&lt;h3 id=&#34;Path::Router&#34;&gt;Path::Router&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Path::Router&#34;&gt;Path::Router&lt;/a&gt; provides simple, reversible routing for URL paths. In addition to basic path matching, it supports variable path components (with optional validation), the ability to look up paths based on the descriptions they were defined with, and useful debugging and testing tools. It&#38;#39;s used to determine your application&#38;#39;s URL structure.&lt;/p&gt;

&lt;h2 id=&#34;Hello-World&#34;&gt;Hello World&lt;/h2&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;{ &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Hello world!&#38;quot;&lt;/span&gt; };&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This defines a simple &#38;quot;Hello world&#38;quot; application. This snippet is a valid &lt;code&gt;.psgi&lt;/code&gt; file (the format used by &lt;a href=&#34;https://metacpan.org/module/Plack&#34;&gt;Plack&lt;/a&gt;), since the &lt;code&gt;router&lt;/code&gt; keyword returns a PSGI application coderef if necessary.&lt;/p&gt;



If you download this example &lt;a href=&#34;hello.psgi&#34;&gt;here&lt;/a&gt;, you can run it with
&lt;tt&gt;plackup hello.psgi&lt;/tt&gt;, and view the results in your browser.

&lt;p&gt;The router block is the most important part of an OX application. It defines the entire URL structure in one place, making tracing the code that is run for a given request as easy as possible to find. Simple routes can define the code to be run directly, but for anything non-trivial, you&#38;#39;ll want to organize the code into models, controllers, etc., as shown in this next example.&lt;/p&gt;

&lt;h2 id=&#34;Another-example&#34;&gt;Another example&lt;/h2&gt;



&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;br /&gt;33:&#38;nbsp;&lt;br /&gt;34:&#38;nbsp;&lt;br /&gt;35:&#38;nbsp;&lt;br /&gt;36:&#38;nbsp;&lt;br /&gt;37:&#38;nbsp;&lt;br /&gt;38:&#38;nbsp;&lt;br /&gt;39:&#38;nbsp;&lt;br /&gt;40:&#38;nbsp;&lt;br /&gt;41:&#38;nbsp;&lt;br /&gt;42:&#38;nbsp;&lt;br /&gt;43:&#38;nbsp;&lt;br /&gt;44:&#38;nbsp;&lt;br /&gt;45:&#38;nbsp;&lt;br /&gt;46:&#38;nbsp;&lt;br /&gt;47:&#38;nbsp;&lt;br /&gt;48:&#38;nbsp;&lt;br /&gt;49:&#38;nbsp;&lt;br /&gt;50:&#38;nbsp;&lt;br /&gt;51:&#38;nbsp;&lt;br /&gt;52:&#38;nbsp;&lt;br /&gt;53:&#38;nbsp;&lt;br /&gt;54:&#38;nbsp;&lt;br /&gt;55:&#38;nbsp;&lt;br /&gt;56:&#38;nbsp;&lt;br /&gt;57:&#38;nbsp;&lt;br /&gt;58:&#38;nbsp;&lt;br /&gt;59:&#38;nbsp;&lt;br /&gt;60:&#38;nbsp;&lt;br /&gt;61:&#38;nbsp;&lt;br /&gt;62:&#38;nbsp;&lt;br /&gt;63:&#38;nbsp;&lt;br /&gt;64:&#38;nbsp;&lt;br /&gt;65:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; Counter::Model&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Moose;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;counter&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;traits&lt;/span&gt;  =&#38;gt; [&lt;span class=&#34;synConstant&#34;&gt;&#39;Counter&#39;&lt;/span&gt;],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Int&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;default&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;0&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;handles&lt;/span&gt; =&#38;gt; {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;inc&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;inc&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;dec&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;dec&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;reset&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;reset&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; Counter::Controller&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;Moose;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;       =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Counter::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;required&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;index &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;model-&#38;gt;counter&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;inc &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;model-&#38;gt;inc&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;dec &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;model-&#38;gt;dec&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;sub &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;reset &lt;/span&gt;{&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self&lt;/span&gt; = &lt;span class=&#34;synStatement&#34;&gt;shift&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;$self-&#38;gt;model-&#38;gt;reset&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; Counter&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;model&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;        =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;       =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Counter::Model&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;lifecycle&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Singleton&#39;&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;has &lt;span class=&#34;synConstant&#34;&gt;controller&lt;/span&gt; =&#38;gt; (&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;is&lt;/span&gt;    =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;ro&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;isa&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;Counter::Controller&#39;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;infer&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;router as {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/&#39;&lt;/span&gt;      =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;controller.index&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/inc&#39;&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;controller.inc&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/dec&#39;&lt;/span&gt;   =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;controller.dec&#39;&lt;/span&gt;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;route &lt;span class=&#34;synConstant&#34;&gt;&#39;/reset&#39;&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synConstant&#34;&gt;&#39;controller.reset&#39;&lt;/span&gt;;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This is a slightly more involved example. Here, paths are routed to methods on controller objects, and OX automatically figures out (via Bread::Board) how to create all of the objects necessary to make the request work.&lt;/p&gt;



This example can be downloaded &lt;a href=&#34;counter.psgi&#34;&gt;here&lt;/a&gt;, and run via
&lt;tt&gt;plackup counter.psgi&lt;/tt&gt;. Access the &lt;tt&gt;/inc&lt;/tt&gt;, &lt;tt&gt;/dec&lt;/tt&gt;, and
&lt;tt&gt;/reset&lt;/tt&gt; paths to manipulate the counter.

&lt;p&gt;One interesting thing to note is how the controller and model are both just normal Moose classes - there is nothing special about them at all. Your application can be structured in any way that you want, and OX will do the work of introspecting and tying together all of the pieces. We will explain how exactly this works over the coming weeks.&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-01T00:00:00-06:00</updated><author><name>Jesse Luehrs</name></author></entry></feed>